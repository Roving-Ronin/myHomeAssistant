### This package assumes you have an import sensor from Solar Analytics "sensor.sa_todays_energy_imported_kwh" 
### which provides cumulative electricity imported in kWh and an export sensor "sensor.sa_todays_energy_exported_kwh"
### which provides cumulative electricity exported in kWh. 

### If you use other sensor names, adjust everything below as required to match. 
### Credits to SgtBatten for original code this was developed from.

template:

  - sensor:

      - name: SA Cost Tracker - Power Imported                                               ## Use this in Energy Dashboard, if using export with its own FIT rate
        unique_id: sa_cost_tracker_power_imported
        icon: mdi:currency-usd
        state_class: total
        device_class: monetary
        unit_of_measurement: $
        state: >
          {% set supply = states('input_number.daily_electricity_supply_charge') | float(0) %}
          {% set offpeak = states('sensor.sa_power_imported_daily_offpeak') | float(0) * states('input_number.electricity_import_rate_offpeak') | float(0) %}
          {% set shoulder = states('sensor.sa_power_imported_daily_shoulder') | float(0) * states('input_number.electricity_import_rate_shoulder') | float(0) %}
          {% set peak = states('sensor.sa_power_imported_daily_peak') | float(0) * states('input_number.electricity_import_rate_peak') | float(0) %}
          {{ (supply + offpeak + shoulder + peak) | round(2) }}


      - name: SA Cost Tracker - Power Exported
        unique_id: sa_cost_tracker_power_exported
        icon: mdi:currency-usd
        state_class: total
        device_class: monetary
        unit_of_measurement: $
        state: >
          {% set feedintariff = states('sensor.sa_power_exported_daily') | float(0) * states('input_number.electricity_export_rate') | float(0) %}
          {{ (feedintariff) | round(2) }}


      - name: SA Cost Tracker - Power Net Cost
        unique_id: sa_cost_tracker_power_net_cost
        icon: mdi:currency-usd
        unit_of_measurement: $
        state_class: total
        device_class: monetary
        state: >
          {% set supply = states('input_number.daily_electricity_supply_charge') | float(0) %}
          {% set offpeak = states('sensor.sa_power_imported_daily_offpeak') | float(0) * states('input_number.electricity_import_rate_offpeak') | float(0) %}
          {% set shoulder = states('sensor.sa_power_imported_daily_shoulder') | float(0) * states('input_number.electricity_import_rate_shoulder') | float(0) %}
          {% set peak = states('sensor.sa_power_imported_daily_peak') | float(0) * states('input_number.electricity_import_rate_peak') | float(0) %}
          {% set feedintariff = states('sensor.sa_power_exported_daily') | float(0) * states('input_number.electricity_export_rate') | float(0) %}
          {{ (supply + offpeak + shoulder + peak - feedintariff) | round(2) }}


###############
#
# UPDATE TO USE ENERGY METER ????
#

utility_meter:

  sa_power_imported_daily:
    unique_id: sa_power_imported_daily
    name: SA Power Imported - Daily
    source: sensor.sa_todays_energy_imported
#    source_type: from_grid
    cycle: daily
#    price_entity: &electricity-price sensor.electricity_price
    tariffs:
      - peak
      - shoulder
      - offpeak

  sa_power_imported_monthly:
    unique_id: sa_power_imported_monthly
    name: SA Power Imported - Monthly
    source: sensor.sa_todays_energy_imported
#    source_type: from_grid
    cycle: monthly
#    price_entity: *electricity-price
    tariffs:
      - peak
      - shoulder
      - offpeak

  sa_power_imported_yearly:
    unique_id: sa_power_imported_yearly
    name: SA Power Imported - Yearly
    source: sensor.sa_todays_energy_imported
#    source_type: from_grid
    cycle: yearly
#    price_entity: *electricity-price
    tariffs:
      - peak
      - shoulder
      - offpeak

###############
#
# Using the energy meter instead of the utility meter, will give a total kWh exported for the day/month/year, as well as the day/month/year total $ for FIT.
# Able to be used as there are NO differing tariffs for the FIT exports.
#

energy_meter:

  sa_power_exported_daily:
    unique_id: sa_power_exported_daily
    name: SA Power Exported - Daily
    source: sensor.sa_todays_energy_exported
    source_type: to_grid
    cycle: daily
    price_entity: &fit-rate sensor.electricity_fit

  sa_power_exported_monthly:
    unique_id: sa_power_exported_monthly
    name: SA Power Exported - Monthly
    source: sensor.sa_todays_energy_exported
    source_type: to_grid
    cycle: monthly
    price_entity: *fit-rate

  sa_power_exported_yearly:
    unique_id: sa_power_exported_yearly
    name: SA Power Exported - Yearly
    source: sensor.sa_todays_energy_exported
    source_type: to_grid
    cycle: yearly
    price_entity: *fit-rate

###############
#
# Adjust the time triggers below to match when your standard electricity tariff changes (peak, shoulder, offpeak). 
# Adjust the template in the action block as required to match your plan.
#

automation:

  - alias: SA Set Power Tariff
    description: 'Set Power Tariff (Solar Analytics) depending upon the day of week and time'
    trigger:
      - platform: time
        at: '07:04:00'
      - platform: time
        at: '09:04:00'
      - platform: time
        at: '17:04:00'
      - platform: time
        at: '20:04:00'
      - platform: time
        at: '22:04:00'
      - platform: homeassistant
        event: start
    condition: []
    action:
      - action: select.select_option
        data:
          option: >-
            {% set t = now() %}
            {%- if (( t.hour >= 7 and t.hour < 9 ) or ( t.hour >= 17 and t.hour < 20 )) and
            is_state('binary_sensor.workday_sensor', 'on') %}
              peak
            {%- elif (( t.hour >= 9 and t.hour < 17 ) or ( t.hour >= 20 and t.hour < 22 )) and 
            is_state('binary_sensor.workday_sensor', 'on') %}
              shoulder
            {%- else -%}
              offpeak
            {%- endif -%}
        target:
          entity_id:
            - select.sa_power_imported_daily
            - select.sa_power_imported_monthly
            - select.sa_power_imported_yearly
    mode: single

#######################
