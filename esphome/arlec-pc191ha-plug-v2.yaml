substitutions:
  # Default name 
  name: "arlec-pc19ha-v2-plug"
  # Default friendly name 
  friendly_name: "Arlec - Smart Plug v2 (PC191HA)"
  # Description as appears in ESPHome & top of webserver page
  device_description: "Arlec PC191HA v2 - Monitoring the power & energy of a device"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  location: ""
  # Project Name
  project_name: "Arlec.Smart Plug (PC191HA v2)"
  # Project Version
  project_version: "1.0.10"
  # The phase in the home power supply, upon which this plug is utilsed. 1p = A. 3p = A, B or C.  (myHome GPO 1 = Phase C, GPO 2 = Phase A, GPO 3 = Phase B)
  power_circuit: "TBC"  
  # Restore the relay (GPO switch) upon reboot to state:
  relay_restore_mode: RESTORE_DEFAULT_ON    
  # Set the update interval for sensors
  sensor_update_interval: 10s

  # HLW8012 Power Monitoring Chip
  # Current Limit in Amps. AU Plug = 10. IL, BR, EU, UK, US Plug = 16.
  current_limit : "10"
  # https://community.home-assistant.io/t/esphome-install-does-not-update-firmware/544026/9?u=mahko_mahko
  initial_mode: "VOLTAGE"             # reports VOLTAGE or CURRENT first
  voltage_divider: "770.0"
  current_resistor: "0.0001"
  current_multiply: "0.4250"
  # If Watts are maringally out after applying the calculated settings above, then the following can be used to tweak the watts reported
  watts_factor: "1.0"
  # how many times to report before swapping between reporting Voltage or Current. Note that the first value reported should be ignored as inaccurate
  change_mode_every: "3"

########################## End of Substitutions #########################
#
# Defines the bk72xx chip that is a cheaper alternative to an ESP828x
#

bk72xx:
  board: wb2s
  framework:
    version: dev

#########################################################################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://roving-ronin/myhomeassistant/esphome/arlec-pc191ha-plug-v2.yaml@main
  import_full_config: false

packages:
  base-config: !include common/base-configuration.yaml
  wifi-config: !include common/network-wifi.yaml
  
#####################################################################

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0' 

  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "3"

#########################################################################
#
# PC191HA basic switch operation - button, relay and LED
#
    # button is momentary on - shows "on" in HA except for the moment the button is being pressed
    # LED should have same on/off state as the relay.  
    # there is also a wifi_LED, but it is not seen from outside the case

binary_sensor:

  - platform: gpio
    pin: P11
    name: "Power Button"
    id: power_button
    disabled_by_default: true
    device_class: window
    # when button is pressed, toggle the switch on/off
    on_press:
      then:
        - switch.toggle: relay
    internal: true

#########################################################################
#
# PC191HA includes a BL0937 chip for measuring power consumption
# and BL0937 is a variation of hlw8012, but using inverted SEL pin functionality
#
sensor:

  - platform: hlw8012
    model: BL0937     # note that the model must be specified to use special calculation parameters
    sel_pin:          # I believe that cf_pin reports either Voltage or Current depending on this select pin
      inverted: true  # determine whether true reports Voltage
      number: P24
    cf_pin:           # current or voltage (ele_pin: 7)
      inverted: true  # the logic of BL0937 is opposite from HLW8012
      number: P7
    cf1_pin:          #  Power (vi_pin: 8)
      inverted: true  # the logic of BL0937 is opposite from HLW8012
      number: P8
    # How often to measure and report values
    update_interval: ${sensor_update_interval}

#########################################################################
#
# Notes:
#   PC191HA measures and returns Voltage OR Current according to the 
#   value of sel_pin, but it can change the value of sel_pin periodically.

#    initial_mode: ${initial_mode}           # reports VOLTAGE or CURRENT
    change_mode_every: ${change_mode_every}  # how many times to report before swapping between
                                             # reporting Voltage or Current. Note that the first value reported should be ignored as inaccurate

    # Adjust according to the actual resistor values on board to calibrate the specific unit
    voltage_divider:  ${voltage_divider}     # LOWER VALUE GIVES LOWER VOLTAGE
    current_resistor: ${current_resistor}    # HIGHER VALUE GIVES LOWER WATTAGE

#########################################################################
#
# Notes:
#   Except that the pc191ha doesn't follow that formula.
#   Setting current_resistor to give an accurate Amperage does NOT also give the correct Wattage
#   See calculator at: https://esphome.io/components/sensor/hlw8012.html

    current:
      name: "Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 2
      filters:
        - multiply: ${current_multiply}
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay

    voltage:
      name: Voltage
      id:   voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - skip_initial: 2

    power:
      name: Active Power
      id: active_power
      unit_of_measurement: W
      accuracy_decimals: 1
      filters:
        - multiply: ${watts_factor}
        - skip_initial: 2
      icon: mdi:power 

    #   Shows the Energy kWh since the device was last booted
    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      accuracy_decimals: 3
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(energy_total_sensor).update();


#########################################################################

    #  Shows the TOTAL/Lifetime Energy kWh used by the device, may reset to zero upon firmware updates
  - platform: template
    name: "Energy Total"
    id: energy_total_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    
    #   Shows the Energy kWh for the current day
  - platform: total_daily_energy
    name: "Energy Daily"
    id: energy_total_daily
    restore: true
    power_id: active_power
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    icon: mdi:hours-24


#########################################################################
# PC191HA basic switch operation - button, relay and LED
#

  # The power relay, controls the socket being On/Off
switch:          
  - platform: gpio
    name: "GPO Switch"
    pin: P6
    id: relay
    restore_mode: "${relay_restore_mode}"   # default when power is turned on
    icon: mdi:power-socket-au
    # synchronise the LED with the relay
    on_turn_on:
      then:
#        - output.turn_on: button_led
        - light.turn_on: button_led
    on_turn_off:
      then:
#        - output.turn_off: button_led
        - light.turn_off: button_led

 # The backlight in the socket on/off button. Replaced below with 'light:'
#output:        
#  - platform: gpio
#    id: button_led
#    pin: P26
#    restore_mode: always off   # default when power is turned on

light:
  - platform: status_led
    name: "GPO Status LED"
    id: button_led
    disabled_by_default: true
    pin:
      number: GPIO26
