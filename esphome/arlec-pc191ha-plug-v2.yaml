substitutions:
  # Default name 
  name: "arlec-pc19ha-v2-plug"
  # Default friendly name 
  friendly_name: "Arlec - Smart Plug v2 (PC191HA)"
  # Description as appears in ESPHome & top of webserver page
  device_description: "Arlec PC191HA v2 - Monitoring the power & energy of a device"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  room: ""
  # Project Name
  project_name: "Arlec.Smart Plug (PC191HA v2)"
  # Project Version
  project_version: "1.0.6"
  # The phase in the home power supply, upon which this plug is utilsed. 1p = A. 3p = A, B or C.  (myHome GPO 1 = Phase C, GPO 2 = Phase A, GPO 3 = Phase B)
  power_circuit: "TBC"  
  # Restore the relay (GPO switch) upon reboot to state:
  relay_restore_mode: RESTORE_DEFAULT_ON    
  # Set the update interval for sensors
  sensor_update_interval: 10s
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".iot.home.lan"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: "Australia/Sydney"
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority
  sntp_server_1: "2.au.pool.ntp.org"
  sntp_server_2: "1.au.pool.ntp.org"
  sntp_server_3: "0.au.pool.ntp.org"
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "true" 
  # HLW8012 Power Monitoring Chip
  # Current Limit in Amps. AU Plug = 10. IL, BR, EU, UK, US Plug = 16.
  current_limit : "10"
  # https://community.home-assistant.io/t/esphome-install-does-not-update-firmware/544026/9?u=mahko_mahko
  initial_mode: "VOLTAGE"             # reports VOLTAGE or CURRENT first
  voltage_divider: "770.0"
  current_resistor: "0.0001"
  current_multiply: "0.4250"
  # If Watts are maringally out after applying the calculated settings above, then the following can be used to tweak the watts reported
  watts_factor: "1.0"
  # how many times to report before swapping between reporting Voltage or Current. Note that the first value reported should be ignored as inaccurate
  change_mode_every: "3"

#########################################################################

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: True
  # Home Assistant - Minimum version required
  min_version: 2024.2.1  
  project:
    name: "${project_name}"
    version: "${project_version}"

#########################################################################

bk72xx:
  board: wb2s
  framework:
    version: dev

preferences:
  # Enable to allow storing of 'Read Total' between reboots and flashing.
  flash_write_interval: 5min

api:

ota:

logger:
  level: INFO        # To filter out all the power meter messages, change to WARN
  baud_rate: 0
  logs:
    component: ERROR # Fix for issue #4717 "Component xxxxxx took a long time for an operation"

  # Enables mDNS Service
mdns:
  disabled: false

#  Enables the local webserver on the ESP device, upon port 80
web_server:
  port: 80

wifi:
  # WiFi credentials
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"
  # This spawns an AP with the device name and mac address with no password.
  ap: {}  

captive_portal:

dashboard_import:
  package_import_url: github://roving-ronin/myHomeAsssint/esphome/arlec-pc191ha-plug-v2.yaml

#####################################################################

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0' 

  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "3"

#########################################################################
# PC191HA basic switch operation - button, relay and LED
#
    # button is momentary on - shows "on" in HA except for the moment the button is being pressed
    # LED should have same on/off state as the relay.  
    # there is also a wifi_LED, but it is not seen from outside the case

binary_sensor:

  - platform: status
    name: "Device Status"
    entity_category: diagnostic

  - platform: gpio
    pin: P11
    name: "Power Button"
    id: power_button
    disabled_by_default: true
    device_class: window
    # when button is pressed, toggle the switch on/off
    on_press:
      then:
        - switch.toggle: relay
    internal: true

sensor:
  #  Sensor uptime in seconds
  - platform: uptime
    name: "Device Uptime Sensor"
    id: uptime_sensor
#    update_interval: 60s
    entity_category: diagnostic
    internal: True


  # Reports the WiFi signal strength/RSSI in dB
#  - platform: wifi_signal
#    id: wifi_signal_db
#    name: "WiFi Signal dB"
#    update_interval: 5min
#    entity_category: "diagnostic"
#    internal: true


  # Reports the WiFi signal strength in %
#  - platform: copy
#    source_id: wifi_signal_db
#    name: "WiFi Signal"
#    filters:
#      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
#    unit_of_measurement: "%"
#    entity_category: "diagnostic"    

#########################################################################
#
# PC191HA includes a BL0937 chip for measuring power consumption
# and BL0937 is a variation of hlw8012, but using inverted SEL pin functionality

  - platform: hlw8012
    model: BL0937     # note that the model must be specified to use special calculation parameters
    sel_pin:          # I believe that cf_pin reports either Voltage or Current depending on this select pin
      inverted: true  # determine whether true reports Voltage
      number: P24
    cf_pin:           # current or voltage (ele_pin: 7)
      inverted: true  # the logic of BL0937 is opposite from HLW8012
      number: P7
    cf1_pin:          #  Power (vi_pin: 8)
      inverted: true  # the logic of BL0937 is opposite from HLW8012
      number: P8
    # How often to measure and report values
    update_interval: ${sensor_update_interval}


# PC191HA measures and returns Voltage OR Current according to the value of sel_pin,
# but it can change the value of sel_pin periodically  

#    initial_mode: ${initial_mode}           # reports VOLTAGE or CURRENT
    change_mode_every: ${change_mode_every}  # how many times to report before swapping between
                                             # reporting Voltage or Current. Note that the first value reported should be ignored as inaccurate

    # Adjust according to the actual resistor values on board to calibrate the specific unit
    voltage_divider:  ${voltage_divider}     # LOWER VALUE GIVES LOWER VOLTAGE
    current_resistor: ${current_resistor}    # HIGHER VALUE GIVES LOWER WATTAGE

    ### except that the pc191ha doesn't follow that formula.
    ### Setting current_resistor to give an accurate Amperage does NOT also give the correct Wattage
    ### See calculator at: https://esphome.io/components/sensor/hlw8012.html

    current:
      name: "Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 2
      filters:
        - multiply: ${current_multiply}
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay

    voltage:
      name: Voltage
      id:   voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - skip_initial: 2

    power:
      name: Active Power
      id: active_power
      unit_of_measurement: W
      accuracy_decimals: 1
      filters:
        - multiply: ${watts_factor}
        - skip_initial: 2

    #   Shows the Energy kWh since the device was last booted
    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      accuracy_decimals: 3
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(energy_total_sensor).update();


#########################################################################

    #  Shows the TOTAL/Lifetime Energy kWh used by the device, may reset to zero upon firmware updates
  - platform: template
    name: "Energy Total"
    id: energy_total_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    update_interval: ${sensor_update_interval}
    
    #   Shows the Energy kWh for the current day
  - platform: total_daily_energy
    name: "Energy Daily"
    id: energy_total_daily
    restore: true
    power_id: active_power
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    update_interval: ${sensor_update_interval}

button:
  - platform: restart
    name: 'Restart Device'
    entity_category: config

  - platform: factory_reset
    name: "Reset Device"
    id: Reset
    entity_category: config

  - platform: safe_mode
    name: "Restart Device Safe Mode"
    internal: false
    entity_category: config

  # The power relay, controls the socket being On/Off
switch:          
  - platform: gpio
    name: "GPO Switch"
    pin: P6
    id: relay
    restore_mode: "${relay_restore_mode}"   # default when power is turned on
    icon: mdi:power-socket-au
    # synchronise the LED with the relay
    on_turn_on:
      then:
#        - output.turn_on: button_led
        - light.turn_on: button_led
    on_turn_off:
      then:
#        - output.turn_off: button_led
        - light.turn_off: button_led

 # The backlight in the socket on/off button. Replaced below with 'light:'
#output:        
#  - platform: gpio
#    id: button_led
#    pin: P26
#    restore_mode: always off   # default when power is turned on

light:
  - platform: status_led
    name: "GPO Status LED"
    id: button_led
    disabled_by_default: true
    pin:
      number: GPIO26

##########################################################################
#
# PC191HA sensors - power monitoring and wifi signal
#

text_sensor:

  - platform: wifi_info
  #  Creates sensor for tracking the WiFi IP address    
    ip_address:
      name: 'WiFi IP Address'
      icon: mdi:wifi
      entity_category: diagnostic

  #  Defines the WiFi SSID network to connect to
    ssid:
      name: 'WiFi SSID'
      icon: mdi:wifi-strength-2
      entity_category: diagnostic

  #  Creates sensor for tracking the WiFi IP MAC address
    mac_address:
      name: 'WiFi MAC Address'
      entity_category: diagnostic

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

  #  Creates a sensor of the name of installed project
  - platform: template
    name: 'Project Name'
    id: project_name
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_name}"};
    update_interval: 6h

  #  Creates a sensor of the version of installed project
  - platform: template
    name: 'Project Version'
    id: project_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h

  #  Creates a sensor showing power circuit / phase of the device
  - platform: template
    name: 'Power Circuit'
    id: power_circuit
    icon: "mdi:electric-switch"
    entity_category: diagnostic
    lambda: |-
      return {"${power_circuit}"};
    update_interval: 6h

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Device Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start
    

   #  Updates the devices internal clock using SNTP.     
time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
