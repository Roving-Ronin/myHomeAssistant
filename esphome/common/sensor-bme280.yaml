sensor:

  # BME280 Sensor in I2C Port - Temperature
  - platform: bme280
    temperature:
      name: "BME280 - Temperature"
      id: bme280_temperature
    pressure:
      name: "BME280 - Pressure"
      id: bme280_pressure
    humidity:
      name: "BME280 - Humidity (Relative)"
      id: bme280_humidity
    address: 0x76
    update_interval: 15s

  # BME280 Sensor in I2C Port - Absolute Humidity
  - platform: absolute_humidity
    name: "BME280 - Humidity (Absolute)"
    temperature: bme280_temperature
    humidity: bme280_humidity
    equation: Wobus   # Wobus (Default), optional Tetens or Buck

  # BME280 Sensor in I2C Port - Dew Point
  - platform: template
    name: "BME280 - Dew Point"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: Â°C
    icon: 'mdi:thermometer-alert'

  # BME280 Sensor in I2C Port - Equivalent Sea Level Pressure (based on 655m Goulburn North)
  - platform: template
    name: "BME280 - Equivalent Sea Level Pressure"
    lambda: |-
      const float STANDARD_ALTITUDE = 656; // in meters, see note
      return id(bme280_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(bme280_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s
    unit_of_measurement: 'hPa'

   # Only Altitude OR Equivalent Sea Level Pressure can be run at one time, not both
#  - platform: template
#    name: "BME280 - Altitude"
#    lambda: |-
#      const float STANDARD_SEA_LEVEL_PRESSURE = 1014.1; //in hPa, see note
#      return ((id(bme280_temperature).state + 273.15) / 0.0065) *
#        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s
#    icon: 'mdi:signal'
#    unit_of_measurement: 'm'
