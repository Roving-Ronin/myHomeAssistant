#########################################################################
#
# Pacakge to configure the use of a device with a BME680 sensor
# see: https://esphome.io/components/sensor/bme680

  # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
   
   # Define i2C bus address, either 0x76 (default) or 0x77 (alternative)
  i2c_address: 0x76
   # Define the number of measurements the BME680 will take, when updating 
   # NONE, 1x, 2x, 4x, 8x or 16x (default)
  temp_oversampling_rate: 16x

   # BME 280 / BME680 Sensor
   # Calibrate the outpute of the temperature sensor.
  temperature_offset: "0.0"
   # Calibrate the outpute of the pressure sensor.
  pressure_offset: "0.0"
   # Calibrate the outpute of the humidity sensor.
  humidity_offset: "0.0"  

#########################################################################
#
# Configure the i2c bus, to find and operate the BME680 sensor
#

i2c:
  - id: bus_a
    sda: ${bus_a_sda_pin}
    scl: ${bus_a_scl_pin}
    scan: true
    frequency: ${bus_a_frequency}

  - id: bus_b
    sda: ${bus_b_sda_pin}
    scl: ${bus_b_scl_pin}
    scan: true
    frequency: ${bus_b_frequency}

#########################################################################
#
# Sensors - Specific to the BME680 sensor.
#

sensor:

   # BME680 Sensor in I2C Port - Temperature
  - platform: bme680
    temperature:
      name: "BME680 - Temperature"
      id: bme680_temperature
      oversampling: ${temp_oversampling_rate}
      accuracy_decimals: 1
      filters:
        offset: ${temperature_offset}

    pressure:
      name: "BME680 - Pressure"
      id: bme680_pressure
      accuracy_decimals: 1
      filters:
        offset: ${pressure_offset}      

    humidity:
      name: "BME680 - Humidity (Relative)"
      id: bme680_humidity
      accuracy_decimals: 1
      filters:
        offset: ${humidity_offset}

    gas_resistance:
      id: "gas_resistance"
      name: "BME680 Gas Resistance"

    address: ${i2c_address}
    update_interval: 60s

#########################################################################

   # BME680 Sensor in I2C Port - Absolute Humidity
  - platform: absolute_humidity
    name: "BME680 - Humidity (Absolute)"
    temperature: bme680_temperature
    humidity: bme680_humidity
    equation: Wobus   # Wobus (Default), optional Tetens or Buck

   # BME680 Sensor in I2C Port - Dew Point
  - platform: template
    name: "BME680 - Dew Point"
    unit_of_measurement: Â°C
    icon: 'mdi:thermometer-alert'    
    lambda: |-
      return (243.5*(log(id(bme680_humidity).state/100)+((17.67*id(bme680_temperature).state)/
      (243.5+id(bme680_temperature).state)))/(17.67-log(id(bme680_humidity).state/100)-
      ((17.67*id(bme680_temperature).state)/(243.5+id(bme680_temperature).state))));


   # BME680 Sensor in I2C Port - Equivalent Sea Level Pressure 
   # Note: This is based on 655m for Goulburn North, NSW. Australia. Update for a different location.
  - platform: template
    name: "BME680 - Equivalent Sea Level Pressure"
    unit_of_measurement: 'hPa'    
    lambda: |-
      const float STANDARD_ALTITUDE = 656; // in meters, see note
      return id(bme680_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(bme680_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s

   # Note: Only Altitude OR Equivalent Sea Level Pressure can be run at one time, not both.
#  - platform: template
#    name: "BME680 - Altitude"
#    unit_of_measurement: 'm'
#    icon: 'mdi:signal'
#    lambda: |-
#      const float STANDARD_SEA_LEVEL_PRESSURE = 1014.1; //in hPa, see note
#      return ((id(bme680_temperature).state + 273.15) / 0.0065) *
#        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme680_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s

  - platform: template
    name: "BME680 - Indoor Air Quality"
    id: bme680_iaq
    icon: "mdi:gauge"
     # Calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(bme680_humidity).state;
    state_class: "measurement"

#########################################################################
#
# BME680 - Text Sensors
#

text_sensor:

  - platform: template
    name: "BME680 - IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(bme680_iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(bme680_iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(bme680_iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(bme680_iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(bme680_iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(bme680_iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(bme680_iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

#########################################################################
