#########################################################################
#
# Utility - Gas Sensors
# 
# Used to monitor mains feed gas, with a reed sensor connected to the gas
# meter, that has a rotating dial with a magnet inside that can be monitored.
#

substitutions:

########################## End of Substitutions #########################
#
# Web_server v3 Sort Groups - These substitutes are applied to overwrite the default ones supplied by the 
# sensor specific template file, in this case the /sensors/hc-sr04-ultrasonic.yaml file.
#

web_server:
  sorting_groups:
    - id: group_town_water_sensors
      name: "Town Water Sensors"
      sorting_weight: -39

#######################################################################################

globals:

  #  Globals for use with pulse meter, to allow storing and setting a base reading for water meter
  - id: town_water_used_total_litres
    type: float
    restore_value: yes
#    initial_value: '0'   # When Factory Reset, return this value to '0.0'

  - id: global_town_water_today
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_town_water_yesterday
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_town_water_week
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_town_water_month
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_town_water_year
    type: float
    restore_value: true
#    initial_value: '0'

################################################################################
#
#  Sensors
#

sensor:
  ################################################################################
  #
  # GPIO 17
  # Utility - Water Meter
  #

  - platform: pulse_counter
    name: "Town Water - Pulse Counter"
    id: town_water_pulse_counter
    pin:
      number: ${gpio_water_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - multiply: 5.0  # Convert pulse count to liters
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 2


  - platform: pulse_meter
    name: "Town Water - Flow Rate"
    id: town_water_flow_rate
    unit_of_measurement: "L/min"
    state_class: measurement
    device_class: water
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: ${gpio_water_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 3min
    filters:
      - multiply: 5.0  # Each pulse equals 5 liters. The water counter 'helper' in Home Assistant must still be set to 'step size' = 5.
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 1

    #  Uses the above pulse_meter and adds sensor and calculations for tracking current litres
    total:
      name: 'Town Water - Used'
      id: town_water_used_litres
      unit_of_measurement: "L"
      icon: "mdi:water"
      state_class: "total_increasing"
      device_class: water
      accuracy_decimals: 2
      filters:
        - multiply: 5.0  # Each pulse equals 5 liters
    #  Adds the calculation for 'Reading Total' 
      on_value: 
        then:
          - lambda: |-
              static float previous_town_water_used_litres_value = 0.0;
              float current_town_water_used_litres_value = id(town_water_used_litres).state;
              id(town_water_used_total_litres) += current_town_water_used_litres_value - previous_town_water_used_litres_value;
              previous_town_water_used_litres_value = current_town_water_used_litres_value;
              id(town_water_used_total).update();
      internal: true

  ################################################################################
  #
  # Custom Component - Water (Consumption) Statistics in Litres
  # These sensors are hidden as the publish their data into the globals, that stores them
  #

  - platform: "water_statistics"
    id: town_water_statistics_component
    total: town_water_used_total

    water_today:
      id: town_water_used_today_sensor
      on_value:
        then:
          - lambda: |-
              id(global_town_water_today) = x;
      internal: true
    
    water_yesterday:
      id: town_water_used_yesterday_sensor
      on_value:
        then:
          - lambda: |-
              id(global_town_water_yesterday) = x;
      internal: true

    water_week:
      id: town_water_used_week_sensor
      on_value:
        then:
          - lambda: |-
              id(global_town_water_week) = x;
      internal: true
    
    water_month:
      id: town_water_used_month_sensor
      on_value:
        then:
          - lambda: |-
              id(global_town_water_month) = x;
      internal: true

    water_year:
      id: town_water_used_year_sensor
      on_value:
        then:
          - lambda: |-
              id(global_town_water_year) = x;
      internal: true


  ################################################################################
  #
  #  Publishes the above sensors, by calling the readings stored in the Globals
  #
# Town Water
  - platform: template
    name: "Town Water - Used Today"
    id: town_water_used_today
    unit_of_measurement: L
    icon: "mdi:hours-24"
    accuracy_decimals: 0
    device_class: water
    state_class: total_increasing
    lambda: |-
      return id(global_town_water_today);
    update_interval: 10s
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 1
        
  - platform: template
    name: "Town Water - Used Yesterday"
    id: town_water_used_yesterday
    unit_of_measurement: L
    icon: "mdi:calendar-today-outline"
    accuracy_decimals: 0
    device_class: water
    state_class: total_increasing
    lambda: |-
      return id(global_town_water_yesterday);
    update_interval: 10s
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 2

  - platform: template
    name: "Town Water - Used Week"
    id: town_water_used_week
    unit_of_measurement: L
    icon: "mdi:calendar-week"
    accuracy_decimals: 0
    device_class: water
    state_class: total_increasing
    lambda: |-
      return id(global_town_water_week);
    update_interval: 10s
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 3

  - platform: template
    name: "Town Water - Used Month"
    id: town_water_used_month
    unit_of_measurement: L
    icon: "mdi:calendar"
    accuracy_decimals: 0
    device_class: water
    state_class: total_increasing
    lambda: |-
      return id(global_town_water_month);
    update_interval: 10s
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 4

  - platform: template
    name: "Town Water - Used Year"
    id: town_water_used_year
    unit_of_measurement: L
    icon: "mdi:calendar-text"
    accuracy_decimals: 0
    device_class: water
    state_class: total_increasing
    lambda: |-
      return id(global_town_water_year);
    update_interval: 10s
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 5

  ################################################################################
  #
  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  #
  - platform: template
    name: "Town Water - Used Total"
    id: town_water_used_total
    unit_of_measurement: "L"
    device_class: water
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 0       # As water meter only registers every 10L
    update_interval: 1s        # Set interval that updates are sent to HA instance
    filters:
      - delta : 0.001
    lambda: |-
          return id(town_water_used_total_litres);
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 6

  ################################################################################
