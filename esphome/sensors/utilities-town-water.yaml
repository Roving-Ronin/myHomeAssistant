 #########################################################################
#
# Utility - Town Water Sensors
# 
# Used to monitor town water supply, with a reed sensor connected to the
# meter, that has a rotating dial with a magnet inside that can be monitored.
#

substitutions:

  water_sensor_update_interval: 15s
  # Multiplier used in the flow rate calculation. Set to the number of litres 1 rotation of the meter equals.
  town_water_litres_per_pulse: "5.0"

  
########################## End of Substitutions #########################
#
# Web_server v3 Sort Groups - These substitutes are applied to overwrite the default ones supplied by the 
# sensor specific template file, in this case the /sensors/hc-sr04-ultrasonic.yaml file.
#

web_server:
  sorting_groups:
    - id: group_town_water_sensors
      name: "Town Water Sensors"
      sorting_weight: -39

#######################################################################################

globals:

  #  Globals for use with pulse meter, to allow storing and setting a base reading for water meter
  - id: global_town_water_total
    type: float
    restore_value: yes
#    initial_value: '0.0'  # When Factory Reset, return this value to '0.0'


################################################################################
#
#  Binary Sensor - Used to publish if the tap is On
#

binary_sensor:
  - platform: template
    name: "Town Water - Tap State"
    id: town_water_tap_state
    lambda: |-
      if (id(town_water_flow_rate).state > 0.01) {
        return true;  // Tap is OPEN
      } else {
        return false; // Tap is CLOSED
      }
    filters:
      - delta: 0.01
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 1

################################################################################
#
#  Sensors
#


sensor:
  ################################################################################
  #
  # GPIO 17
  # Utility - Water Meter
  #

  - platform: pulse_counter
    name: "Town Water - Pulse Counter"
    id: town_water_pulse_counter
    pin:
      number: ${gpio_water_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - multiply: ${town_water_litres_per_pulse} # Convert pulse count to liters
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 3


  - platform: pulse_meter
    name: "Town Water - Flow Rate"
    id: town_water_flow_rate
    unit_of_measurement: "L/min"
    state_class: measurement
    device_class: water
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: ${gpio_water_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 3min
    filters:
      - multiply: ${town_water_litres_per_pulse}  # Each pulse equals 5 liters. The water counter 'helper' in Home Assistant must still be set to 'step size' = 5.
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 2

    #  Uses the above pulse_meter and adds sensor and calculations for tracking current litres
    total:
      name: 'Town Water - Consumed Calculation'
      id: town_water_consumed_calculation
      unit_of_measurement: "L"
      icon: "mdi:water"
      state_class: "total_increasing"
      device_class: water
      accuracy_decimals: 2
      filters:
        - multiply: ${town_water_litres_per_pulse}  # Each pulse equals 5 liters
    #  Adds the calculation for 'Reading Total' 
      on_value: 
        then:
          - lambda: |-
              static float previous_town_water_used_litres_value = 0.0;
              float current_town_water_used_litres_value = id(town_water_consumed_calculation).state;
              id(global_town_water_total) += current_town_water_used_litres_value - previous_town_water_used_litres_value;
              previous_town_water_used_litres_value = current_town_water_used_litres_value;
              id(town_water_total).update();
      internal: true


  ################################################################################
  #
  # Custom Component - Water (Consumption) Statistics in Litres
  # These sensors are hidden as the publish their data into the globals, that stores them
  #

  - platform: "water_statistics"
    id: town_water_statistics_component
    total: town_water_total

    water_today:
      name: "Town Water - Today"
      id: town_water_today
      web_server:
        sorting_group_id: group_town_water_sensors
        sorting_weight: 1
    
    water_yesterday:
      name: "Town Water - Yesterday"
      id: town_water_yesterday
      web_server:
        sorting_group_id: group_town_water_sensors
        sorting_weight: 2

    water_week:
      name: "Town Water - Week"
      id: town_water_week
      web_server:
        sorting_group_id: group_town_water_sensors
        sorting_weight: 3
    
    water_month:
      name: "Town Water - Month"
      id: town_water_month
      web_server:
        sorting_group_id: group_town_water_sensors
        sorting_weight: 4

    water_year:
      name: "Town Water - Year"
      id: town_water_year
      web_server:
        sorting_group_id: group_town_water_sensors
        sorting_weight: 5


  ################################################################################
  #
  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  #
  - platform: template
    name: "Town Water - Total"
    id: town_water_total
    unit_of_measurement: "L"
    device_class: water
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 0                              # As water meter only registers every 10L / whole litres
    update_interval: ${water_sensor_update_interval}  # Set interval that updates are sent to HA instance
    lambda: |-
          return id(global_town_water_total);
    web_server:
      sorting_group_id: group_town_water_sensors
      sorting_weight: 6


  ################################################################################
  #
  #  Uses the Usage_Tracker custom component to publish duration of last tap OPEN.
  #

  - platform: usage_tracker
    on_off_sensor: town_water_tap_state

    last_use:
      name: "Town Water - Last Use Duration"
      unit_of_measurement: "min"
      accuracy_decimals: 1
      filters:
        - lambda: |-
            return x / 60.0;
        - delta: 0.1         # Only update if change is â‰¥ 0.1 min
      web_server:
        sorting_group_id: group_utility_meter_sensors
        sorting_weight: 4
  ################################################################################
