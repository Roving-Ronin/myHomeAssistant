#########################################################################
#
# Utility - Gas Sensors
# 
# Used to monitor mains feed gas, with a reed sensor connected to the gas
# meter, that has a rotating dial with a magnet inside that can be monitored.
#

substitutions:

########################## End of Substitutions #########################
#
# Restore input values from the valued stored by their respective globals
#
esphome:
  on_boot:
    priority: -10  # Ensure this runs before other components rely on the numbers' values
    then:
      - lambda: |-
          id(input_gas_pressure_factor).publish_state(id(gas_pressure_factor));
          id(input_gas_heating_value).publish_state(id(gas_heating_value));

#########################################################################
#
# Web_server v3 Sort Groups - These substitutes are applied to overwrite the default ones supplied by the 
# sensor specific template file, in this case the /sensors/hc-sr04-ultrasonic.yaml file.
#

web_server:
  sorting_groups:
    - id: group_gas_mj_sensors
      name: "Gas Sensors (MJ)"
      sorting_weight: -38
    - id: group_gas_m3_sensors
      name: "Gas Sensors (m³)"
      sorting_weight: -37

#######################################################################################

globals:

  - id: gas_pressure_factor
    type: float
    restore_value: true
    initial_value: "0.9864"  # Default value stored in flash

  - id: gas_heating_value
    type: float
    restore_value: true
    initial_value: "37.98"  # Default value stored in flash

  - id: global_gas_total_mj
    type: float
    restore_value: yes

  #  Globals for use with pulse meter, to allow storing and setting a base reading for gas meter
  - id: global_gas_total_m3
    type: float
    restore_value: yes


  - id: global_gas_m3_today
    type: float
    restore_value: true
    initial_value: '0.0'

  - id: global_gas_m3_yesterday
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_gas_m3_week
    type: float
    restore_value: true
    initial_value: '0.0'

  - id: global_gas_m3_month
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_gas_m3_year
    type: float
    restore_value: true
#    initial_value: '0'


  - id: global_gas_mj_today
    type: float
    restore_value: true
    initial_value: '0.0'

  - id: global_gas_mj_yesterday
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_gas_mj_week
    type: float
    restore_value: true
    initial_value: '0.0'

  - id: global_gas_mj_month
    type: float
    restore_value: true
#    initial_value: '0'

  - id: global_gas_mj_year
    type: float
    restore_value: true
#    initial_value: '0'


#######################################################################################
#
# Number Inputs - Used to configure the values used to convert Gas M3 to MJ
#

number:
  - platform: template
    name: "Gas - Pressure Factor"
    id: input_gas_pressure_factor
    min_value: 0.9
    max_value: 1.1
    step: 0.0001
    unit_of_measurement: ""
#    restore_value: true
    optimistic: true
    mode: box
    icon: "mdi:scale"
    entity_category: config
    set_action:
      then:
        - globals.set:
            id: gas_pressure_factor
            value: !lambda "return x;"    
    web_server:
      sorting_weight: 20
    
  - platform: template
    name: "Gas - Heating Value"
    id: input_gas_heating_value
    min_value: 34.0
    max_value: 52.0
    step: 0.01
    unit_of_measurement: ""
#    restore_value: true
    optimistic: true
    mode: box
    icon: "mdi:fire"
    entity_category: config
    set_action:
      then:
        - globals.set:
            id: gas_heating_value
            value: !lambda "return x;" 
    web_server:
      sorting_weight: 21


################################################################################
#
#  Sensors
#

sensor:
  ################################################################################
  #
  # GPIO Input A3 - PIN 5
  # Utility - Gas Meter
  #

  - platform: pulse_counter
    name: "Gas - Pulse Counter"
    id: gas_pulse_counter
    pin:
      number: ${gpio_gas_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 4


  - platform: pulse_meter
    name: 'Gas - Flow Rate'
    id: "gas_flow_rate"
    unit_of_measurement: "L/min" # "m³/h"
    state_class: measurement
#    device_class: volume  # Disabled to stop this being recorded in HA
    icon: "mdi:pump"
    accuracy_decimals: 3
    pin:
      number: ${gpio_gas_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 3min
    filters:
      - multiply: 10.0     # 1 pulse = 10L. The gas counter 'helper' in Home Assistant must still be set to 'step size' = 10.
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 3

    #  Uses the above pulse_meter and adds sensor and calculations for tracking m3
    total:    
      name: 'Gas - Used (m³)'
      id: gas_used_m3
      unit_of_measurement: "m³"
      icon: "mdi:counter"
      state_class: "total_increasing"
      device_class: gas
      accuracy_decimals: 3
      filters:
        - multiply: 0.01   # 100 pulses = 1,000L = 1m3
    #  Adds the calculation for providing a reading since device last booted / reset
    #  Linea below changed to seperate m3 and MJ gas totals and calculations
      on_value: 
        then:
          - lambda: |-
              static float previous_gas_m3_value = 0.0;
              float current_gas_m3_value = id(gas_used_m3).state;
              float gas_delta_m3 = current_gas_m3_value - previous_gas_m3_value;
              
              // Update total gas used in m³
              id(global_gas_total_m3) += gas_delta_m3;

              // Calculate gas used in MJ
              float pressure_factor = id(input_gas_pressure_factor).state;
              float heating_value = id(input_gas_heating_value).state;
              float gas_delta_mj = gas_delta_m3 * pressure_factor * heating_value;
              
              // Update total gas used in MJ
              id(global_gas_total_mj) += gas_delta_mj;

              // Save the current value for the next calculation
              previous_gas_m3_value = current_gas_m3_value;

              // Update global sensors
              id(gas_used_total).update();
              id(gas_used_total_mj).update();
      internal: true

  ################################################################################
  #
  # Custom Component - Gas m3 (Consumption) Statistics
  # These sensors are hidden as the publish their data into the globals, that stores them
  #

  - platform: "gas_statistics"
    id: gas_statistics_component
    total: gas_used_total

    gas_today:
      id: gas_used_today_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_m3_today) = x;
      internal: true
    
    gas_yesterday:
      id: gas_used_yesterday_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_m3_yesterday) = x;
      internal: true

    gas_week:
      id: gas_used_week_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_m3_week) = x;
      internal: true
    
    gas_month:
      id: gas_used_month_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_m3_month) = x;
      internal: true

    gas_year:
      id: gas_used_year_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_m3_year) = x;
      internal: true


  ################################################################################
  #
  #  Publishes the above sensors, by calling the readings stored in the Globals
  #
# Town Water
  - platform: template
    name: "Gas - Used Today"
    id: gas_used_today
    unit_of_measurement: 'm³'
    device_class: gas
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:hours-24"
    lambda: |-
      return id(global_gas_m3_today);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 1
        
  - platform: template
    name: "Gas - Used Yesterday"
    id: gas_used_yesterday
    unit_of_measurement: 'm³'
    device_class: gas
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-today-outline"
    lambda: |-
      return id(global_gas_m3_yesterday);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 2

  - platform: template
    name: "Gas - Used Week"
    id: gas_used_week
    unit_of_measurement: 'm³'
    device_class: gas
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-week"
    lambda: |-
      return id(global_gas_m3_week);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 3

  - platform: template
    name: "Gas - Used Month"
    id: gas_used_month
    unit_of_measurement: 'm³'
    device_class: gas
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar"
    lambda: |-
      return id(global_gas_m3_month);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 4

  - platform: template
    name: "Gas - Used Year"
    id: gas_used_year
    unit_of_measurement: 'm³'
    device_class: gas
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-text"    
    lambda: |-
      return id(global_gas_m3_year);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 5

  ################################################################################

  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  - platform: template
    name: "Gas - Used Total"
    id: gas_used_total
    unit_of_measurement: "m³"
    device_class: gas
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3
    # The number 5251.07 should be replaced with your own gas meters physical reading
    lambda: |-
          return id(global_gas_total_m3);
    # Set interval that updates are sent to HA instance
    update_interval: 1s
    filters:
      - delta : 0.001
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 6


  ################################################################################
  #
  # Custom Component - Gas MJ (Consumption) Statistics
  #

  - platform: "gas_statistics_mj"
    id: gas_statistics_mj_component
    total: gas_used_total_mj

    gas_today:
      id: gas_used_today_mj_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_mj_today) = x;
      internal: true
    
    gas_yesterday:
      id: gas_used_yesterday_mj_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_mj_yesterday) = x;
      internal: true

    gas_week:
      id: gas_used_week_mj_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_mj_week) = x;
      internal: true
    
    gas_month:
      id: gas_used_month_mj_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_mj_month) = x;
      internal: true
      
    gas_year:
      id: gas_used_year_mj_sensor
      on_value:
        then:
          - lambda: |-
              id(global_gas_mj_year) = x;
      internal: true

  ################################################################################
  #
  #  Publishes the above sensors, by calling the readings stored in the Globals
  #
# Town Water
  - platform: template
    name: "Gas - Used Today (MJ)"
    id: gas_used_today_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:hours-24"
    lambda: |-
      return id(global_gas_mj_today);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 1
        
  - platform: template
    name: "Gas - Used Yesterday (MJ)"
    id: gas_used_yesterday_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-today-outline"
    lambda: |-
      return id(global_gas_mj_yesterday);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 2

  - platform: template
    name: "Gas - Used Week (MJ)"
    id: gas_used_week_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-week"
    lambda: |-
      return id(global_gas_mj_week);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 3

  - platform: template
    name: "Gas - Used Month (MJ)"
    id: gas_used_month_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar"
    lambda: |-
      return id(global_gas_mj_month);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 4

  - platform: template
    name: "Gas - Used Year (MJ)"
    id: gas_used_year_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-text"
    lambda: |-
      return id(global_gas_mj_year);
    update_interval: 10s
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 5


  ################################################################################
  
  - platform: template
    name: "Gas - Used Total (MJ)"
    id: gas_used_total_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3   
    # With EACH QUARTERLY GAS BILL update the Jemena Pressure Factor and Heating Value below.   
    # Formula - (Gas Used x Pressure Factor x Heating Value) = Usage MJ
    lambda: |-
       return id(global_gas_total_mj);
    update_interval: 1s
    filters:
      - delta : 0.001
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 6

  ################################################################################
