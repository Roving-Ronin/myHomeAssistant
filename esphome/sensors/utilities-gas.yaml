#########################################################################
#
# Utility - Gas Sensors
# 
# Used to monitor mains feed gas, with a reed sensor connected to the gas
# meter, that has a rotating dial with a magnet inside that can be monitored.
#

substitutions:
  gas_sensor_update_interval: 15s

########################## End of Substitutions #########################
#
# Restore input values from the valued stored by their respective globals
#
esphome:
  on_boot:
    priority: -10  # Ensure this runs before other components rely on the numbers' values
    then:
      - lambda: |-
          id(input_gas_pressure_factor).publish_state(id(gas_pressure_factor));
          id(input_gas_heating_value).publish_state(id(gas_heating_value));

#########################################################################
#
# Web_server v3 Sort Groups - These substitutes are applied to overwrite the default ones supplied by the 
# sensor specific template file, in this case the /sensors/hc-sr04-ultrasonic.yaml file.
#

web_server:
  sorting_groups:
  
    - id: group_gas_mj_sensors
      name: "Gas Sensors (MJ)"
      sorting_weight: -38

    - id: group_gas_m3_sensors
      name: "Gas Sensors (m³)"
      sorting_weight: -37

#######################################################################################

globals:

  - id: gas_pressure_factor
    type: float
    restore_value: true
#    initial_value: "0.9519"  # Default value stored in flash

  - id: gas_heating_value
    type: float
    restore_value: true
#    initial_value: "38.68"  # Default value stored in flash

  - id: global_gas_total_mj
    type: float
    restore_value: yes

  #  Globals for use with pulse meter, to allow storing and setting a base reading for gas meter
  - id: global_gas_total_m3
    type: float
    restore_value: yes

  # Used by the text_sensor to reformat the Last Used Duration into hours/minutes/seconds.
  - id: last_formatted_duration_gas
    type: std::string
    restore_value: no
    initial_value: '""'

#######################################################################################
#
# Number Inputs - Used to configure the values used to convert Gas M3 to MJ
#

number:
  - platform: template
    name: "Gas - Pressure Factor"
    id: input_gas_pressure_factor
    min_value: 0.9
    max_value: 1.1
    step: 0.0001
    unit_of_measurement: ""
    optimistic: true
    mode: box
    icon: "mdi:scale"
    entity_category: config
    set_action:
      then:
        - globals.set:
            id: gas_pressure_factor
            value: !lambda "return x;"    
    web_server:
      sorting_weight: 20
    
  - platform: template
    name: "Gas - Heating Value"
    id: input_gas_heating_value
    min_value: 34.0
    max_value: 52.0
    step: 0.01
    unit_of_measurement: ""
#    restore_value: true
    optimistic: true
    mode: box
    icon: "mdi:fire"
    entity_category: config
    set_action:
      then:
        - globals.set:
            id: gas_heating_value
            value: !lambda "return x;" 
    web_server:
      sorting_weight: 21


################################################################################
#
#  Binary Sensor - Used to internally determine if the tap is ON/OFF.
#

binary_sensor:
  - platform: template
    name: "Gas - Valve State Sensor"
    id: gas_valve_state_sensor
    lambda: |-
      return id(gas_flow_rate).state > 0.01;
    on_press:
      then:
        - text_sensor.template.publish:
            id: gas_valve_state
            state: "OPEN"
    on_release:
      then:
        - text_sensor.template.publish:
            id: gas_valve_state
            state: "CLOSED"
    internal: true


################################################################################
#
#  Text Sensor - Used to publish if the tap is On
#

text_sensor:
  - platform: template
    name: "Gas - Valve State"
    id: gas_valve_state
    icon: "mdi:meter-gas"
    update_interval: never
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 10


  - platform: template
    name: "Gas - Last Use Duration"
    id: gas_last_use_duration
    icon: mdi:timer-outline
    lambda: |-
      // Check if the sensor has a valid state
      if (!id(gas_last_use_sensor).has_state()) {
        return std::string("Unknown");
      }

      int seconds = id(gas_last_use_sensor).state;
      if (seconds < 0) {
        return std::string("Unknown");
      }

      // Format the duration
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds / 60;
      seconds = seconds % 60;

      std::string new_value;
      if (days > 3650) {
        new_value = "Starting up";
      } else if (days) {
        new_value = to_string(days) + "d " + to_string(hours) + "h " + to_string(minutes) + "m " + to_string(seconds) + "s";
      } else if (hours) {
        new_value = to_string(hours) + "h " + to_string(minutes) + "m " + to_string(seconds) + "s";
      } else if (minutes) {
        new_value = to_string(minutes) + "m " + to_string(seconds) + "s";
      } else {
        new_value = to_string(seconds) + "s";
      }
      // Only return a new value if it differs from the previous one
      if (new_value != id(last_formatted_duration_gas)) {
        id(last_formatted_duration_gas) = new_value;
        return new_value;
      }
      return {};
#    update_interval: 10s
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 13


################################################################################
#
#  Sensors
#

sensor:
  ################################################################################
  #
  # GPIO Input A3 - PIN 5
  # Utility - Gas Meter
  #

  - platform: pulse_counter
    name: "Gas - Pulse Counter"
    id: gas_pulse_counter
    pin:
      number: ${gpio_gas_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal: false
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 12


  - platform: pulse_meter
    name: 'Gas - Flow Rate'
    id: "gas_flow_rate"
    unit_of_measurement: "L/min" # "m³/h"
    state_class: measurement
#    device_class: volume  # Disabled to stop this being recorded in HA
    icon: "mdi:pump"
    accuracy_decimals: 3
    pin:
      number: ${gpio_gas_pin}
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 150s
    filters:
      - multiply: 10.0     # 1 pulse = 10L. The gas counter 'helper' in Home Assistant must still be set to 'step size' = 10.
    web_server:
      sorting_group_id: group_utility_meter_sensors
      sorting_weight: 11

    #  Uses the above pulse_meter and adds sensor and calculations for tracking m3
    total:    
      name: 'Gas - Consumed Calculations'
      id: gas_consumed_calculations
      unit_of_measurement: "m³"
      icon: "mdi:counter"
      state_class: "total_increasing"
      device_class: gas
      accuracy_decimals: 3
      filters:
        - multiply: 0.01   # 100 pulses = 1,000L = 1m3
    #  Adds the calculation for providing a reading since device last booted / reset
    #  Linea below changed to seperate m3 and MJ gas totals and calculations
      on_value: 
        then:
          - lambda: |-
              static float previous_gas_m3_value = 0.0;
              float current_gas_m3_value = id(gas_consumed_calculations).state;
              float gas_delta_m3 = current_gas_m3_value - previous_gas_m3_value;
              
              // Update total gas used in m³
              id(global_gas_total_m3) += gas_delta_m3;

              // Calculate gas used in MJ
              float pressure_factor = id(input_gas_pressure_factor).state;
              float heating_value = id(input_gas_heating_value).state;
              float gas_delta_mj = gas_delta_m3 * pressure_factor * heating_value;
              
              // Update total gas used in MJ
              id(global_gas_total_mj) += gas_delta_mj;

              // Save the current value for the next calculation
              previous_gas_m3_value = current_gas_m3_value;

              // Update global sensors
              id(gas_total_m3).update();
              id(gas_total_mj).update();
      internal: true


  ################################################################################
  #
  # Custom Component - Gas m3 (Consumption) Statistics
  # These sensors are hidden as the publish their data into the globals, that stores them
  #

  - platform: "gas_statistics"
    id: gas_statistics_component
    total: gas_total_m3

    gas_today:
      name: "Gas - Today"
      id: gas_m3_today
      web_server:
        sorting_group_id: group_gas_m3_sensors
        sorting_weight: 1
    
    gas_yesterday:
      name: "Gas - Yesterday"
      id: gas_m3_yesterday
      web_server:
        sorting_group_id: group_gas_m3_sensors
        sorting_weight: 2

    gas_week:
      name: "Gas - Week"
      id: gas_m3_week
      web_server:
        sorting_group_id: group_gas_m3_sensors
        sorting_weight: 3      
    
    gas_month:
      name: "Gas - Month"
      id: gas_m3_month
      web_server:
        sorting_group_id: group_gas_m3_sensors
        sorting_weight: 4

    gas_year:
      name: "Gas - Year"
      id: gas_m3_year
      web_server:
        sorting_group_id: group_gas_m3_sensors
        sorting_weight: 5


  ################################################################################

  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  - platform: template
    name: "Gas - Total"
    id: gas_total_m3
    unit_of_measurement: "m³"
    device_class: gas
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3
    # The number 5251.07 should be replaced with your own gas meters physical reading
    lambda: |-
          return id(global_gas_total_m3);
    # Set interval that updates are sent to HA instance
    update_interval: ${gas_sensor_update_interval}
    web_server:
      sorting_group_id: group_gas_m3_sensors
      sorting_weight: 6


  ################################################################################
  #
  # Custom Component - Gas MJ (Consumption) Statistics
  #

  - platform: "gas_statistics_mj"
    id: gas_statistics_mj_component
    total: gas_total_mj

    gas_today:
      name: "Gas - Today (MJ)"
      id: gas_used_today_mj
      web_server:
        sorting_group_id: group_gas_mj_sensors
        sorting_weight: 1
    
    gas_yesterday:
      name: "Gas - Yesterday (MJ)"
      id: gas_used_yesterday_mj
      web_server:
        sorting_group_id: group_gas_mj_sensors
        sorting_weight: 2

    gas_week:
      name: "Gas - Week (MJ)"
      id: gas_used_week_mj
      web_server:
        sorting_group_id: group_gas_mj_sensors
        sorting_weight: 3
    
    gas_month:
      name: "Gas - Month (MJ)"
      id: gas_used_month_mj
      web_server:
        sorting_group_id: group_gas_mj_sensors
        sorting_weight: 4
      
    gas_year:
      name: "Gas - Year (MJ)"
      id: gas_used_year_mj
      web_server:
        sorting_group_id: group_gas_mj_sensors
        sorting_weight: 5


  ################################################################################
  
  - platform: template
    name: "Gas - Total (MJ)"
    id: gas_total_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3   
    # With EACH QUARTERLY GAS BILL update the Jemena Pressure Factor and Heating Value below.   
    # Formula - (Gas Used x Pressure Factor x Heating Value) = Usage MJ
    lambda: |-
       return id(global_gas_total_mj);
    update_interval: ${gas_sensor_update_interval}
    web_server:
      sorting_group_id: group_gas_mj_sensors
      sorting_weight: 6

  ################################################################################
  #
  #  Uses the Usage_Tracker custom component to publish duration of last tap OPEN.
  #

  - platform: usage_tracker
    on_off_sensor: gas_valve_state_sensor

    # This is internal as we use a text_sensor above to reformat the output into days/hours/min/sec.
    last_use:
      name: "Gas - Last Use Sensor"
      id: gas_last_use_sensor
      accuracy_decimals: 1
      filters:
        - delta: 0.1         # Only update if change is ≥ 0.1 min
      internal: true

    # Don't want to show this sensor, but the custom_component requires that both sensors are used.
    lifetime_use:
      name: "Gas - Lifetime Use Duration"
      id: gas_lifetime_use_sensor
      unit_of_measurement: "min"
      accuracy_decimals: 1
      filters:
        - lambda: |-
            return x / 60.0;
        - delta: 0.1         # Only update if change is ≥ 0.1 min
      web_server:
        sorting_group_id: group_utility_meter_sensors
        sorting_weight: 5
      internal: true
      
################################################################################
