#####################################################################
#
# Combined with web_server settings in /common/base-configuration to
# define a network information group
#

web_server:
  sorting_groups:
    
    - id: group_electricity
      name: "Electricity Sensors"
      sorting_weight: -50
    
    - id: group_energy
      name: "Energy Sensors"
      sorting_weight: -40
    
    - id: group_controls
      name: "Controls"
      sorting_weight: -30
      

#####################################################################
#
# This file contains all the common sensors that are used by
# Athom v2 and v3 Power Plugs.
#

esphome:
  on_boot:
    - priority: 600
      then:
        - select.set_index:
            id: power_mode
            index: !lambda |-
                    return id(restore_mode)-1;
        - lambda: |-
              switch(id(restore_mode))
              {
              case 1:{
                      id(relay).turn_on();
                      break;
                            }
              case 2:{
                      id(relay).turn_off();
                      break;
                            }
              default:{
                      break;
                            }
              }

#####################################################################
#
# External Components
#

# Energy Statistics Components - Adds 'Platform - Energy Statistics'
# https://github.com/Roving-Ronin/myHomeAssistant/tree/main/components/energy_statistics

external_components:
  - source: github://roving-ronin/myhomeassistant/components@main
    refresh: 0s


#####################################################################
#
# Used to store the Total kWh used (lifetime) between reboots
#

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0' 

  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "1"    # Default to "Always On"

############ Store Energy Component Readings #############
    
  - id: global_energy_today
    type: float
    restore_value: yes

  - id: global_energy_yesterday
    type: float
    restore_value: yes

  - id: global_energy_week
    type: float
    restore_value: yes

  - id: global_energy_month
    type: float
    restore_value: yes

  - id: global_energy_year
    type: float
    restore_value: yes


#####################################################################
#
# Select - To allow setting power on state from the GUI
#

select:
  - platform: template
    name: "Power On State"
    id: "power_mode"
    optimistic: true
    icon: "mdi:electric-switch"
    options:
      - Always On
      - Always Off
      - Restore Power Off State
    on_value:
      then:
        - lambda: |-
            id(restore_mode)=i+1;
    web_server:
      sorting_group_id: group_controls
      sorting_weight: 3
            
#####################################################################
#
# Binary Sensors
#

binary_sensor:

    # Defines the Power On/Off button and its GPIO PIN#
  - platform: gpio
    pin:
      number: ${power_button_pin}
      mode: INPUT_PULLUP
      inverted: true
    id: power_button
    name: "Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
          - ON for at least 4s
        then:
          - button.press: Reset
    internal: true

#####################################################################
#
# Power / Current / Energy monitoring sensors. 
# The chipset used is self calibrating, so no tuning is required.
#

sensor:

  - platform: cse7766
    power:
      name: "Active Power"
      id: active_power
      unit_of_measurement: W
      accuracy_decimals: 1         
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 0.3) return 0.0; else return x;    #For the chip will report less than 3w power when no load is connected
      icon: "mdi:power"
      web_server:
        sorting_group_id: group_electricity
        sorting_weight: 1

    apparent_power:
      name: "Apparent Power"
      unit_of_measurement: VA
      accuracy_decimals: 1         
      filters:
        - throttle_average: ${sensor_update_interval}
      icon: "mdi:power"
      web_server:
        sorting_group_id: group_electricity
        sorting_weight: 2

#  REM OUT - Known issue with CSE7766 sees some plugs reporting/spamming "Impossible reactive power: -0.xxx "
#    reactive_power:
#      name: "Reactive Power"
#      unit_of_measurement: var
#      accuracy_decimals: 0   
#      filters:
#        - throttle_average: ${sensor_update_interval}
#        - lambda: |-
#            if (x < 0) {
#              return 0;  // Ignore negative values and set to 0
#            } else {
#              return x;
#            }
#      icon: "mdi:flash"
#      web_server:
#        sorting_group_id: group_electricity
#        sorting_weight: 3
      
    current:
      name: "Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 2
      icon: "mdi:current-ac"
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 0.060) return 0.0; else return x;   #For the chip will report less than 3w power when no load is connected
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay
      web_server:
        sorting_group_id: group_electricity
        sorting_weight: 4

    voltage:
      name: "Voltage"
      id:   voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: "mdi:sine-wave"
      filters:
        - throttle_average: ${sensor_update_interval}
      web_server:
        sorting_group_id: group_electricity
        sorting_weight: 5

    power_factor:
      name: "Power Factor"
      filters:
        - throttle_average: ${sensor_update_interval}
      icon: "mdi:percent-outline"
      web_server:
        sorting_group_id: group_electricity
        sorting_weight: 6

    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      accuracy_decimals: 3      
      filters:
        - throttle: ${sensor_update_interval}
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(energy_total_sensor).update();
      internal: true

#####################################################################
#
# Function added by the Dentra Components
#

     # Energy Statistic Components - Define the id of the sensor tracking 'Total Energy' used
  - platform: "energy_statistics"
    id: energy_statistics_component
    total: energy_total_sensor
    
     # Energy Statistic Components - Adds Energy Today. Persistents if restarted, unlike 'total_daily_energy'
    energy_today:
      id: total_energy_today_sensor
      on_value:
        then:
          - lambda: |-
              id(global_energy_today) = x;
      internal: true

     # Energy Statistics Components - Adds Energy Yesterday
    energy_yesterday:
      id: total_energy_yesterday_sensor
      on_value:
        then:
          - lambda: |-
              id(global_energy_yesterday) = x;
      internal: true

     # Energy Statistics Components - Adds Energy Week
    energy_week:
      id: total_energy_week_sensor
      on_value:
        then:
          - lambda: |-
              id(global_energy_week) = x;
      internal: true

     # Energy Statistics Components - Adds Energy Month
    energy_month:
      id: total_energy_month_sensor
      on_value:
        then:
          - lambda: |-
              id(global_energy_month) = x;
      internal: true

     # Energy Statistics Components - Adds Energy Year
    energy_year:
      id: total_energy_year_sensor
      on_value:
        then:
          - lambda: |-
              id(global_energy_year) = x;
      internal: true


  ################################################################################
  #
  #  Publishes the above sensors, by calling the readings stored in the Globals
  #

  # Energy Statistic Sensors

  - platform: template
    name: "Energy - Today"
    id: energy_today
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:hours-24"
    lambda: |-
      return id(global_energy_today);
    update_interval: 10s
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 1
        
  - platform: template
    name: "Energy - Yesterday"
    id: energy_yesterday
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-today"
    lambda: |-
      return id(global_energy_yesterday);
    update_interval: 10s
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 2

  - platform: template
    name: "Energy - Week"
    id: energy_week
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-week"
    lambda: |-
      return id(global_energy_week);
    update_interval: 10s
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 3

  - platform: template
    name: "Energy - Month"
    id: energy_month
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-month"
    lambda: |-
      return id(global_energy_month);
    update_interval: 10s
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 4

  - platform: template
    name: "Energy - Year"
    id: energy_year
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:calendar-text"
    lambda: |-
      return id(global_energy_year);
    update_interval: 10s
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 5

#########################################################################

    # Shows the TOTAL/Lifetime Energy kWh used by the device, will be reset to zero upon firmware updates though.
  - platform: template
    name: "Energy - Total"
    id: energy_total_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    accuracy_decimals: 3
    icon: "mdi:lightning-bolt"
    lambda: |-
      return id(total_energy);
    web_server:
      sorting_group_id: group_energy
      sorting_weight: 6
   

#########################################################################
#
# Configures basic switch operation - Bbutton that manually controls
# the GPO socket relay and controls the blue LED backlight.
#

switch:
  - platform: gpio
    name: "GPO Switch"
    pin: ${gpo_switch_pin}
    id: relay
    restore_mode: ${relay_restore_mode}
    icon: "mdi:power-socket-au"
    web_server:
      sorting_group_id: group_controls
      sorting_weight: 1

light:
  - platform: status_led
    name: "GPO Status LED"
    id: blue_led
    disabled_by_default: true
    pin:
      inverted: true
      number: ${gpo_status_led_pin}
    icon: "mdi:lightbulb-outline"
    web_server:
      sorting_group_id: group_controls
      sorting_weight: 2

#########################################################################
