#########################################################################
#
# Aldi Casalux - LED Downlight with Cold White/ Warm White template
#

   # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
   # Default name 
  name: "aldi-casalux-led-downlight"
   # Default friendly name 
  friendly_name: "Aldi - Casalux - LED Downlight"
   # Description as appears in ESPHome & top of webserver page
  device_description: "Aldi Casalux Smart LED Downlight - 8W CW/WW"
   # Project Name
  project_name: "Aldi Casalux.Smart LED Downlight CW/WW"
   # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "1.0.0"
   # Restore the relay (Light switch) upon reboot to state:
  light_restore_mode: RESTORE_DEFAULT_OFF
   # Set your locations latitude and longitude. Useful if you want to use the sun and its location in relation to the horizon to on/off (or as a condition) to control lights.
  my_latitude: "-34.73503534407444"
  my_longitude: "149.72998380661014"
   # From: https://esphome.io/components/output/ledc.html
  frequency_cw: "1220Hz"
  frequency_ww: "1220Hz"
   # Set the default colour temperature desired (min. 2700 K / max. 65000 K). 3000 K = Warm White, 4000 K = Cool White, 5000 K = Daylight, 6500 K = Cool Daylight.
   # Normally this can be left at '6500 K' and is defined in Home Assistant Automation / Blueprints, where they can be varied per automation/blueprint used.
  default_colour_temperature: "6500 K"
  
########################## End of Substitutions #########################

esphome:

  on_boot:
    priority: 600
    then:
      - light.turn_on: 
          id: downlight
          brightness: 100%
          color_temperature: 6500K
      - delay: 2.5s
      - light.turn_off:
          id: downlight

#########################################################################
#
# Defines the bk72xx chip that is a cheaper alternative to an ESP828x
#

bk72xx:
  board: generic-bk7231t-qfn32-tuya

#########################################################################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://roving-ronin/myhomeassistant/esphome/aldi-casalux-smart-led-cwww.yaml@main
  import_full_config: false

packages:
  base-config:   !include common/base-configuration.yaml
  wifi-config:   !include common/network-wifi.yaml
#  led-lifecycle: !include sensors/led-lifetime-runtime.yaml
#  led-lifecycle: !include sensors/led_duty_time.yaml

#########################################################################
#
# Custom Components to be utilised - For Light Last/Lifetime usage
#

external_components:
  - source:
      type: git
      url: https://github.com/roving-ronin/myhomeassistant/
      ref: main
    refresh: 0s
    components: [ usage_tracker ]

#########################################################################
#
# Components and sensors defined in base-configuration.yaml that are
# to be to be disabled, as not compatible or needed with this device.
#

 # Remove Network section (IPv6), as not supported on this chipset
network: !remove

#####################################################################
#
# Combined with web_server settings in /common/base-configuration to
# define a network information group
#

web_server:
  version: 3
  sorting_groups:
    - id: group_light_controls
      name: "Light Controls"
      sorting_weight: -30

#########################################################################
#
# Define the RGBW Lights and their GPIO PINS to control them.
#

output:
  - platform: libretiny_pwm
    id: colour_temp
    pin: P7
    inverted: True

  - platform: libretiny_pwm
    id: bright_control
    pin: P8

#########################################################################
#
# Define the RGBW LEDs as a device type 'Light'.
# See: https://esphome.io/components/light/cwww.html
#

light:
  - platform: color_temperature
    name: "Downlight"
    id: downlight
    icon: mdi:lightbulb-on
    color_temperature: colour_temp
    brightness: bright_control
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    restore_mode: ${light_restore_mode}
    web_server:
      sorting_group_id: group_light_controls
      sorting_weight: 1

#########################################################################
#
# Define the sensors that publish the Last Use & Lifetime Use duration of the LED.
# See: https://github.com/Roving-Ronin/myHomeAssistant/tree/main/components/usage_tracker
#

sensor:
  - platform: "usage_tracker"
    id: usage_tracker_component
    on_off_sensor: downlight

    last_use:
#      name: "LED - Last Use Duration"
      id: usage_tracker_last_use
#    internal: true

    lifetime_use:
#      name: "LED - Lifetime Use Duration"
      id: usage_tracker_lifetime_use
#    internal: true

##########################################################################
#
# Text Sensors
#

text_sensor:
   # Creates a sensor of the Usage Tracker sensors, in formatted days, hours, minutes and seconds
  - platform: template
    name: "LED - Last Use Duration"
    lambda: |-
      int seconds = (id(usage_tracker_last_use).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    update_interval: ${sensor_update_interval}
    icon: mdi:timer-outline
    web_server:
      sorting_weight: 10


  - platform: template
    name: "LED - Lifetime Use Duration"
    lambda: |-
      int seconds = (id(usage_tracker_lifetime_use).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    update_interval: ${sensor_update_interval}
    icon: mdi:chart-bell-curve-cumulative
    web_server:
      sorting_weight: 11


#########################################################################
#
# Define LAT & LONG, allowing local checking triggers such as:
# Event on_sunrise / on_sunset etc, see: https://esphome.io/components/sun.html
#

sun:
  latitude: "${my_latitude}"
  longitude: "${my_longitude}"
  id: sun_home

#########################################################################
