#########################################################################
#
# Controls the garage door and provides remote status and control, and 
# environmental monitoring using ESP32-S3 chipset and BME280 sensor(s)
# for temperature, humidity, pressure & dew point.
#

  # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
   # Default name
  name: "garage-controller"
   # Default friendly name
  friendly_name: "Garage Controller"
   # Description as appears in ESPHome & top of webserver page
  device_description: "Garage - Door status, remote control, car park occupancy, temperature & humidty"
   # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc    
  location: "Garage"
   # The phase in the home power supply, upon which this plug is utilsed. 1p = A. 3p = A, B or C.  (myHome GPO 1 = Phase C, GPO 2 = Phase A, GPO 3 = Phase B)
  power_circuit: "GPO 3"  
   # Project Name
  project_name: "DIY.Garage Controller"
   # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version  
  project_version: "1.0.2"
   # If true, entity should not be added to Home Assistant frontend, without the user manually enabling it.
  disable_by_default: "false"

   # I2C PINS - Used for BME280 sensor Bus A
  bus_a_sda_pin: "GPIO21"      # Default on ESP32 is SDA = PIN 21. ES32-S3 use 20
  bus_a_scl_pin: "GPIO22"      # Default on ESP32 is SLC = PIN 22. ES32-S3 use 21
  bus_a_frequency: "100kHz"    # Optional: 100kHz

   # I2C PINS - Used for BME280 sensor Bus B
  bus_b_sda_pin: "GPIO14"      # Default on ESP32 is SDA = PIN14 ??. ES32-S3 use ??
  bus_b_scl_pin: "GPIO15"      # Default on ESP32 is SLC = PIN15 ??. ES32-S3 use ??  
  bus_b_frequency: "100kHz"    # Optional: 100kHz

   # Ultrasonic HC-SR04+ PINs
  sonar_trigger_pin: GPIO19
  sonar_echo_pin: GPIO18

   # Ultrasonic sensor name and ID
  ultrasonic_sensor_name: "Parked Car Sensorr"
  ultrasonic_sensor_id: "parked_car_sensor"

   # Garage Door Cover - Time to open or close (1,000ms = 1sec)
  open_duration: "14000" # ms
  close_duration: "12500" # ms

   # Garage Door Opener (Relay) Switch config
  garage_door_relay_pin: GPIO32 # gpio pin that trigger the door opening/closing/stop
  active_switch_duration: 200ms # amount of time relay is closed
  push_interval: "1500" # safe time between relay activations in ms

   # Reed Switch Sensors
  garage_door_open_sensor_pin: GPIO26 # gpio pin for open endstop sensor
  garage_door_closed_sensor_pin: GPIO27 # gpio pin for close endstop sensor
  debounce_time: 30ms # debounce time for open/close endstops

########################## End of Substitutions #########################

esphome:

  on_boot:
    priority: -10
    then:
      - lambda: |-
          // check cover position
          if (id(garage_door_open_sensor).state) // door open
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
          }
          else if (id(garage_door_closed_sensor).state) // door closed
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
          }
          else // door neither closed nor open 
          {
            // last dir not know, so let cover restore last state
          }

#########################################################################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://roving-ronin/myhomeassistant/esphome/garage-controller.yaml@main
  import_full_config: false

packages:
  base-config:      !include common/base-configuration.yaml
  wifi-config:      !include common/network-wifi.yaml
  bme280a-sensors:  !include sensors/bme280-bus-a.yaml
# bme280b-sensors:  !include sensors/bme280-bus-b.yaml
  hc-sr04-sensors: !include sensors/hc-sr04-ultrasonic.yaml

#########################################################################

globals:
  - id: last_dir
    type: esphome::cover::CoverOperation
    restore_value: yes
    initial_value: esphome::cover::COVER_OPERATION_IDLE
  
  - id: target_action
    type: int
    restore_value: no
    initial_value: "3" # Idle: 0, Open: 1, Close: 2, None: 3
  
  - id: push_interval
    type: int
    restore_value: no
    initial_value: $push_interval
  
  - id: open_duration
    type: uint32_t
    restore_value: no
    initial_value: $open_duration
  
  - id: close_duration
    type: uint32_t
    restore_value: no
    initial_value: $close_duration

#########################################################################

binary_sensor:

     # Reed switch used to detect if the garage door is in the OPEN position
  - platform: gpio
    pin:
      number: $garage_door_open_sensor_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Door - Sensor (Open)"
    id: garage_door_open_sensor
    disabled_by_default: $disable_by_default
     # Hides this sensor from ESPHome web interface
    internal: true
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
    on_release:
       # Door was commanded manually (not ESPhome)
      then:
        - lambda: |-          
            // set state as closing. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();


     # Reed switch used to detect if the garage door is in the CLOSED position
  - platform: gpio
    pin:
      number: $garage_door_closed_sensor_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Door - Sensor (Closed)"
    id: garage_door_closed_sensor
    disabled_by_default: $disable_by_default
    # Hides this sensor from ESPHome web interface
    internal: true
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
    on_release:
       # door was commanded manually (not ESPhome)
      then:
        - lambda: |-
            // set state as opening. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();

#########################################################################

switch:

     # Relay with wire to garage door motor/opener, to send open/close signal
  - platform: gpio
    pin: $garage_door_relay_pin
    name: "Garage Door - Relay"
    id: garage_door_relay
    # Hides this sensor from ESPHome web interface
    internal: true
    disabled_by_default: $disable_by_default
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: $active_switch_duration
      - switch.turn_off: garage_door_relay

     # Virtual lock, if enabled will stop the garage door (via relay) from being triggered to open/close
  - platform: template
    name: "Garage Door - Virtual Lock"
    id: virtual_lock
    optimistic: true
    restore_mode: ALWAYS_ON

#########################################################################

text_sensor:

  - platform: template
    name: "Parking State"
    id: parking_state
    lambda: |-
      if (id(garage_door_open_sensor).state && id(parked_car_sensor).state <= 0.75) {
        return {"Door Open | Vehicle Parked"};
      } else if (id(garage_door_closed_sensor).state && id(parked_car_sensor).state <= 0.75) {
        return {"Door Closed | Vehicle Parked"};
      } else if ((id(garage_door_closed_sensor).state == id(garage_door_open_sensor).state) && id(parked_car_sensor).state <= 0.75) {
        return {"Door Ajar | Vehicle Parked"};
      } else if (id(garage_door_open_sensor).state && id(parked_car_sensor).state >= 0.80 && id(parked_car_sensor).state <= 3.00) {
        return {"Door Open | Vehicle Away"};
      } else if (id(garage_door_closed_sensor).state && id(parked_car_sensor).state >= 0.80 && id(parked_car_sensor).state <= 3.00) {
        return {"Door Closed | Vehicle Away"};
      } else if ((id(garage_door_closed_sensor).state == id(garage_door_open_sensor).state) && id(parked_car_sensor).state >= 0.80 && id(parked_car_sensor).state <= 3.00) {
        return {"Door Ajar | Vehicle Away"};
      } else { 
        return {"Unknown"};  
      }
    update_interval: 30s

    # Use the distance under the ultrasonic sensor to determine if the parking space is occupied or empty
  - platform: template
    name: "Parking Space"
    id: parking_space
    lambda: |-
      if (id(parked_car_sensor).state <= 0.99) {
        // car is in the garage
        return {"OCCUPIED"};
      } else if (id(parked_car_sensor).state >= 1.0) {
        return {"EMPTY"};
      } else { 
        return {"Unknown"};  
      }
    update_interval: 30s

#########################################################################

cover:

  - platform: template
    name: Garage Door
    id: garage_door
    device_class: garage
    optimistic: false
    has_position: true
    assumed_state: false
    # main loop
    lambda: |-
      static uint32_t last_recompute_time = 0;
      static uint32_t last_publish_time = 0;
      static uint32_t last_push_time = 0;
      // store current time
      const uint32_t now = millis();
      // recompute position
      if (id(garage_door).current_operation != COVER_OPERATION_IDLE)  // Door moving
      {
        float dir;
        float action_dur;
        // set dir and duration depending on current movement
        if (id(garage_door).current_operation == COVER_OPERATION_CLOSING)
        {
          // door closing
          dir = -1.0f;
          action_dur = id(close_duration);
        }
        else
        {
          // door opening
          dir = 1.0f;
          action_dur = id(open_duration);
        }
        // calculate position
        float position = id(garage_door).position;
        position += dir * (now - last_recompute_time) / action_dur;
        id(garage_door).position = clamp(position, 0.0f, 1.0f);
        // publish position every second
        if (now - last_publish_time > 1000)
        {
          id(garage_door).publish_state();
          last_publish_time = now;
        }
      }
      last_recompute_time = now;
      // push button if target action different than current operation
      if (id(target_action) != 3 && id(target_action) != id(garage_door).current_operation)
      {
        if (now - last_push_time > id(push_interval))
        {
          id(push_one).execute();
          last_push_time = now;
        }
      }
      else if (id(target_action) == id(garage_door).current_operation)
      {
        // target reached, set target as None (3).
        ESP_LOGD("target", "Target Reached");
        id(target_action) = 3;
      }
      return {};
    open_action:
        - if:
            condition:
              - and:
                - switch.is_off: virtual_lock
                - binary_sensor.is_on: garage_door_closed_sensor
            then: 
              - logger.log:
                  format: "Open Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_OPEN)
                  {
                    id(target_action) = COVER_OPERATION_OPENING;
                  }
    close_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_on: garage_door_open_sensor
          then:
              - logger.log:
                  format: "Close Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_CLOSED)
                  {
                    id(target_action) = COVER_OPERATION_CLOSING;
                  }
    stop_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_off: garage_door_closed_sensor
              - binary_sensor.is_off: garage_door_open_sensor
          then:
              - logger.log:
                  format: "Stop Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_OPEN && id(garage_door).position != COVER_CLOSED)
                  {
                    id(target_action) = COVER_OPERATION_IDLE;
                  }

#########################################################################

script:
  - id: push_one
    mode: single
    then:
      - logger.log: "Push 1 Times"
      - switch.turn_on: garage_door_relay
      # state machine
      - lambda: |-
          if (id(garage_door).current_operation == esphome::cover::COVER_OPERATION_OPENING || id(garage_door).current_operation == esphome::cover::COVER_OPERATION_CLOSING)
          {
            // door moving
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
          }
          else
          {
            // door idle
            if (id(last_dir) == esphome::cover::COVER_OPERATION_OPENING)
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
              id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            }
            else
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
              id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            }
          }
          id(garage_door).publish_state();

#########################################################################
