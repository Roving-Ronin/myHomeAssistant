substitutions:
  # Provides substitutions or variables that are then called elsewhere multiple times in the config
  device_name: "garage-controller"
  device_description: "Garage - Door status and remote control, car park occupancy, temperature & humidty"
  project_name: "esphome.garage"
  project_version: "1.0"
  set_timezone: "Australia/Sydney"
  set_dns_domain: ".iot.home.lan"

  # If true, entity should not be added to Home Assistant frontend, without the user manually enabling it.
  disable_by_default: "false"

  # I2C PINS - Used for BME280 sensor
  sda_pin: GPIO21   # Default on ESP32 is SDA = PIN 21. ES32 S3 use 20
  scl_pin: GPIO22   # Default on ESP32 is SLC = PIN 22. ES32 S3 use 21

  # Ultrasonic HC-SR04+ PINs
  sonar_trigger_pin: GPIO19
  sonar_echo_pin: GPIO18

  # Garage Door Cover - Time to open or close (1,000ms = 1sec)
  open_duration: "14000" # ms
  close_duration: "12500" # ms

  # Garage Door Opener (Relay) Switch config
  garage_door_relay_pin: GPIO32 # gpio pin that trigger the door opening/closing/stop
  active_switch_duration: 200ms # amount of time relay is closed
  push_interval: "1500" # safe time between relay activations in ms

  # Reed Switch Sensors
  garage_door_open_sensor_pin: GPIO26 # gpio pin for open endstop sensor
  garage_door_closed_sensor_pin: GPIO27 # gpio pin for close endstop sensor
  debounce_time: 30ms # debounce time for open/close endstops

###############################################################################################  

esphome:
  name: "garage-controller"
  friendly_name: Garage Controller
  comment: "${device_description}"
  name_add_mac_suffix: false
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    priority: -10
    then:
      - lambda: |-
          // check cover position
          if (id(garage_door_open_sensor).state) // door open
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
          }
          else if (id(garage_door_closed_sensor).state) // door closed
          {
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
          }
          else // door neither closed nor open 
          {
            // last dir not know, so let cover restore last state
          }

esp32:
  # Board Type = esp32-s3
  board: esp32dev
  framework:
    type: arduino

packages:
  baseline: !include common/common.baseline.yaml
  sensor: !include common/common.sensor.yaml
#  binary_sensor: !include common/common.binary_sensor.yaml
  text_sensor: !include common/common.text_sensor.yaml
  button: !include common/common.button.yaml
  wifi: !include common/common.wifi.yaml
  time: !include common/common.time.yaml

  # Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

  # Over the Air Firmware Updates
ota:
  - platform: esphome

logger:
  level: WARN        # To filter out all the power meter messages, change to WARN
  baud_rate: 0
  logs:
    component: ERROR # Fix for issue #4717 "Component xxxxxx took a long time for an operation"

wifi:
  # WiFi credentials
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

button:


# ======================================================================================

globals:
  - id: last_dir
    type: esphome::cover::CoverOperation
    restore_value: yes
    initial_value: esphome::cover::COVER_OPERATION_IDLE
  - id: target_action
    type: int
    restore_value: no
    initial_value: "3" # Idle: 0, Open: 1, Close: 2, None: 3
  - id: push_interval
    type: int
    restore_value: no
    initial_value: $push_interval
  - id: open_duration
    type: uint32_t
    restore_value: no
    initial_value: $open_duration
  - id: close_duration
    type: uint32_t
    restore_value: no
    initial_value: $close_duration


# =========================================

binary_sensor:

  # Reed switch used to detect if the garage door is in the OPEN position
  - platform: gpio
    pin:
      number: $garage_door_open_sensor_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Door - Sensor (Open)"
    id: garage_door_open_sensor
    disabled_by_default: $disable_by_default
    # Hides this sensor from ESPHome web interface
    internal: true
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_OPEN;
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();
    on_release:
      # Door was commanded manually (not ESPhome)
      then:
        - lambda: |-          
            // set state as closing. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();

  # Reed switch used to detect if the garage door is in the CLOSED position
  - platform: gpio
    pin:
      number: $garage_door_closed_sensor_pin
      mode: INPUT_PULLUP
      inverted: true
    name: "Garage Door - Sensor (Closed)"
    id: garage_door_closed_sensor
    disabled_by_default: $disable_by_default
    # Hides this sensor from ESPHome web interface
    internal: true
    filters:
      - delayed_on_off: $debounce_time
    on_press:
      then:
        - lambda: |-
            // stop all current actions
            id(push_one).stop();
            // update states
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
            id(garage_door).position = esphome::cover::COVER_CLOSED;
            id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            id(garage_door).publish_state();
    on_release:
      # door was commanded manually (not ESPhome)
      then:
        - lambda: |-
            // set state as opening. This will start position update and reporting
            id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
            id(garage_door).publish_state();


# =========================================

switch:

  # Relay with wire to garage door motor/opener, to send open/close signal
  - platform: gpio
    pin: $garage_door_relay_pin
    name: "Garage Door - Relay"
    id: garage_door_relay
    # Hides this sensor from ESPHome web interface
    internal: true
    disabled_by_default: $disable_by_default
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: $active_switch_duration
      - switch.turn_off: garage_door_relay

  # Virtual lock, if enabled will stop the garage door (via relay) from being triggered to open/close
  - platform: template
    name: "Garage Door - Virtual Lock"
    id: virtual_lock
    optimistic: true
    restore_state: true
    restore_mode: RESTORE_DEFAULT_ON


# =========================================

i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true
  id: bus_a

# =========================================

sensor:

  # BME280 Sensor in I2C Port - Temperature. Connected to 5V (with Ultrasonic).
  - platform: bme280
    address: 0x76
    update_interval: 30s

    # Temperature sensor - defaults to celcius
    temperature:
      name: "BME280 - Temperature"
      id: bme280_temperature
      accuracy_decimals: 1
      filters:
        offset: 0.0

    # Pressure sensor - defaults to hPa
    pressure:
      name: "BME280 - Pressure"
      id: bme280_pressure
      accuracy_decimals: 1

    # Relative Humidity sensor
    humidity:
      name: "BME280 - Humidity (Relative)"
      id: bme280_humidity
      accuracy_decimals: 1
      filters:
        offset: -3.0      

  # BME280 Sensor in I2C Port - Absolute Humidity
  - platform: absolute_humidity
    name: "BME280 - Humidity (Absolute)"
    state_class: 'measurement'
    accuracy_decimals: 1
    temperature: bme280_temperature
    humidity: bme280_humidity
    equation: Wobus   # Wobus (Default), optional Tetens or Buck

  # BME280 Sensor in I2C Port - Dew Point
  - platform: template
    name: "BME280 - Dew Point"
    state_class: 'measurement'
    accuracy_decimals: 1
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: Â°C
    icon: 'mdi:thermometer-alert'
    filters:
      - filter_out: nan

  # BME280 Sensor in I2C Port - Equivalent Sea Level Pressure (based on 655m Goulburn North)
  - platform: template
    name: "BME280 - Pressure (Equivalent Sea Level)"
    state_class: 'measurement'
    accuracy_decimals: 1
    lambda: |-
      const float STANDARD_ALTITUDE = 656; // in meters, see note
      return id(bme280_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(bme280_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 15s
    unit_of_measurement: 'hPa'

  # HC-SR04+ Ultrasonic Sensor - Connected to 5V (with BME280) - 2cm to 450cm. Wide Voltage Operation: 3V-5.5V
  - platform: ultrasonic
    name: "Garage - Parking Sonar"
    id: garage_ultrasonic_sensor
    disabled_by_default: $disable_by_default
    state_class: 'measurement'
#    unit_of_measurement: cm  # Default is meters. If using cm then lambdas need to be changed to reflect
    trigger_pin: $sonar_trigger_pin
    echo_pin: $sonar_echo_pin
    update_interval: 30s
#    pulse_time: 20us
    filters:
      - filter_out: nan
    # Maximum distance reading possible. Enter distance from sensor to floor.
    timeout: 3.0m
    # Hides this sensor from ESPHome web interface
#    internal: true

# =========================================

text_sensor:
  - platform: template
    name: "Garage - State"
    id: garage_state
    lambda: |-
      if (id(garage_door_open_sensor).state && id(garage_ultrasonic_sensor).state <= 0.75) {
        return {"Door Open | Vehicle Parked"};
      } else if (id(garage_door_closed_sensor).state && id(garage_ultrasonic_sensor).state <= 0.75) {
        return {"Door Closed | Vehicle Parked"};
      } else if ((id(garage_door_closed_sensor).state == id(garage_door_open_sensor).state) && id(garage_ultrasonic_sensor).state <= 0.75) {
        return {"Door Ajar | Vehicle Parked"};
      } else if (id(garage_door_open_sensor).state && id(garage_ultrasonic_sensor).state >= 0.80 && id(garage_ultrasonic_sensor).state <= 3.00) {
        return {"Door Open | Vehicle Away"};
      } else if (id(garage_door_closed_sensor).state && id(garage_ultrasonic_sensor).state >= 0.80 && id(garage_ultrasonic_sensor).state <= 3.00) {
        return {"Door Closed | Vehicle Away"};
      } else if ((id(garage_door_closed_sensor).state == id(garage_door_open_sensor).state) && id(garage_ultrasonic_sensor).state >= 0.80 && id(garage_ultrasonic_sensor).state <= 3.00) {
        return {"Door Ajar | Vehicle Away"};
      } else { 
        return {"Unknown"};  
      }
    update_interval: 30s

    # Use the distance under the ultrasonic sensor to determine if the parking space is occupied or empty
  - platform: template
    name: "Garage - Parking Space"
    id: garage_parking_space
    lambda: |-
      if (id(garage_ultrasonic_sensor).state <= 0.99) {
        // car is in the garage
        return {"OCCUPIED"};
      } else if (id(garage_ultrasonic_sensor).state >= 1.0) {
        return {"EMPTY"};
      } else { 
        return {"Unknown"};  
      }
    update_interval: 30s


# =========================================

cover:
  - platform: template
    name: Garage Door
    id: garage_door
    device_class: garage
    optimistic: false
    has_position: true
    assumed_state: false
    # main loop
    lambda: |-
      static uint32_t last_recompute_time = 0;
      static uint32_t last_publish_time = 0;
      static uint32_t last_push_time = 0;
      // store current time
      const uint32_t now = millis();
      // recompute position
      if (id(garage_door).current_operation != COVER_OPERATION_IDLE)  // Door moving
      {
        float dir;
        float action_dur;
        // set dir and duration depending on current movement
        if (id(garage_door).current_operation == COVER_OPERATION_CLOSING)
        {
          // door closing
          dir = -1.0f;
          action_dur = id(close_duration);
        }
        else
        {
          // door opening
          dir = 1.0f;
          action_dur = id(open_duration);
        }
        // calculate position
        float position = id(garage_door).position;
        position += dir * (now - last_recompute_time) / action_dur;
        id(garage_door).position = clamp(position, 0.0f, 1.0f);
        // publish position every second
        if (now - last_publish_time > 1000)
        {
          id(garage_door).publish_state();
          last_publish_time = now;
        }
      }
      last_recompute_time = now;
      // push button if target action different than current operation
      if (id(target_action) != 3 && id(target_action) != id(garage_door).current_operation)
      {
        if (now - last_push_time > id(push_interval))
        {
          id(push_one).execute();
          last_push_time = now;
        }
      }
      else if (id(target_action) == id(garage_door).current_operation)
      {
        // target reached, set target as None (3).
        ESP_LOGD("target", "Target Reached");
        id(target_action) = 3;
      }
      return {};

 
    open_action:
        - if:
            condition:
              - and:
                - switch.is_off: virtual_lock
                - binary_sensor.is_on: garage_door_closed_sensor
            then: 
              - logger.log:
                  format: "Open Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_OPEN)
                  {
                    id(target_action) = COVER_OPERATION_OPENING;
                  }
    close_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_on: garage_door_open_sensor
          then:
              - logger.log:
                  format: "Close Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_CLOSED)
                  {
                    id(target_action) = COVER_OPERATION_CLOSING;
                  }
    stop_action:
      - if:
          condition:
            - and:
              - switch.is_off: virtual_lock
              - binary_sensor.is_off: garage_door_closed_sensor
              - binary_sensor.is_off: garage_door_open_sensor
          then:
              - logger.log:
                  format: "Stop Action - CO:%u PO:%f LD:%u"
                  args: [ id(garage_door).current_operation, id(garage_door).position, id(last_dir) ]
      # update target
              - lambda: |-
                  if (id(garage_door).position != COVER_OPEN && id(garage_door).position != COVER_CLOSED)
                  {
                    id(target_action) = COVER_OPERATION_IDLE;
                  }
script:
  - id: push_one
    mode: single
    then:
      - logger.log: "Push 1 Times"
      - switch.turn_on: garage_door_relay
      # state machine
      - lambda: |-
          if (id(garage_door).current_operation == esphome::cover::COVER_OPERATION_OPENING || id(garage_door).current_operation == esphome::cover::COVER_OPERATION_CLOSING)
          {
            // door moving
            id(garage_door).current_operation = esphome::cover::COVER_OPERATION_IDLE;
          }
          else
          {
            // door idle
            if (id(last_dir) == esphome::cover::COVER_OPERATION_OPENING)
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_CLOSING;
              id(last_dir) = esphome::cover::COVER_OPERATION_CLOSING;
            }
            else
            {
              id(garage_door).current_operation = esphome::cover::COVER_OPERATION_OPENING;
              id(last_dir) = esphome::cover::COVER_OPERATION_OPENING;
            }
          }
          id(garage_door).publish_state();
