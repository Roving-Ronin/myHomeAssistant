#########################################################################
#
# Kincony KC868-A16 Device
#
# Provides:
#    - Environmental monitoring using ESP32-S3 chipset and BME280 sensor(s)
#      for temperature, humidity, pressure & dew point.
#    - Gas consumption and meter tracking monitoring
#    - Water consumption and meter tracking monitoring
#

  # Provides substitutions or variables that are then called elsewhere multiple times in the config
substitutions:
  # Default name
  name: "kc868-a16"
  # Default friendly name  
  friendly_name: "Kincony KC868-A16"
  # Description as appears in ESPHome & top of webserver page
  device_description: "Kincony KC868-A16 with 16 I/O and RS485 support"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  location: "Monitoring - ESPHome"
  # Project Name
  project_name: "Kincony.KC868-A16"
  # Project version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "1.0.8"
  # Restore the relay (GPO switch) upon reboot to state:
  relay_restore_mode: RESTORE_DEFAULT_OFF
  # Disable sensors
  disable_entities: "false"

   # I2C PINS - Used for BME280 sensor Bus A
  bus_a_sda_pin: "GPIO4"      # Default on ESP32 is SDA = PIN 21. ES32-S3 (ESP-WROOM-32D) use 20
  bus_a_scl_pin: "GPIO5"      # Default on ESP32 is SLC = PIN 22. ES32-S3 (ESP-WROOM-32D) use 21
  bus_a_frequency: "100kHz"    # Optional: 100kHz

   # I2C PINS - Used for BME280 sensor Bus B
  #bus_b_sda_pin: "GPIO14"      # Default on ESP32 is SDA = PIN14 ??. ES32-S3 (ESP-WROOM-32D) use ??
  #bus_b_scl_pin: "GPIO15"      # Default on ESP32 is SLC = PIN15 ??. ES32-S3 (ESP-WROOM-32D) use ??  
  #bus_b_frequency: "100kHz"    # Optional: 100kHz

   # BME 280 / BME680 Sensor
   #
   # Location of BME280/680 Sensor #1. Used to prefix sensor if there are two. Leave empty if only 1. Add a " - " to the end of each entry if used.
  bme_sensor1_location: "Garage - "
   # Location of BME280/680 Sensor #2. Used to prefix sensor if there are two. Leave empty if only 1. Add a " - " to the end of each entry if used.
  bme_sensor2_location: ""
   # Calibrate the outpute of the temperature sensor(s).
  temperature_1_offset: "0.0"
  temperature_2_offset: "0.0"
   # Calibrate the outpute of the pressure sensor(s).
  pressure_1_offset: "0.0"
  pressure_2_offset: "0.0"
   # Calibrate the outpute of the humidity sensor(s).
  humidity_1_offset: "0.0"
  humidity_2_offset: "0.0"

########################## End of Substitutions #########################
#
# Defines the type of ESP chip used on the device. 
# Must be in the local devices configuration file.
#

esp32:
  board: esp32dev
  framework:
    type: arduino
  flash_size: 4MB

#########################################################################
#
# Remote Packages to be utilised
#

dashboard_import:
  package_import_url: github://roving-ronin/myhomeassistant/esphome/kincony-kc868-a16.yaml.yaml@main
  import_full_config: false

packages:
  base-config:     !include common/base-configuration.yaml
  wifi-config:     !include common/network-wifi.yaml
#  ethernet-config: !include common/network-ethernet.yaml
  bme280-sensors:  !include sensors/bme280-bus-a.yaml

# ADD GAS AND WATER SENSORS

#########################################################################
#
# Sun Azimuth and Elevation for Home Address
#

sun:
  latitude: -34.726460°
  longitude: 149.724503°
  id: sun_home

#########################################################################
#
# Enable Home Assistant API
#

api:
  # Define service that calls the 'button:' defined below to reset the Gas Meter - Current Reading'
  services:
    - service: reset_total_energy
      then:
        - button.press:
            id: button_reset_gas_reading

  # Define service that calls the 'button:' defined below to reset the Water - Current Reading'
    - service: reset_total_energy
      then:
        - button.press:
            id: button_reset_water_reading

#########################################################################

button:
  #  Reset the total energy entity (Gas - Current Reading)
  - platform: template
    name: 'Gas Meter - Reset Reading'
    entity_category: config
    id: button_reset_gas_reading
    on_press:
      - pulse_meter.set_total_pulses:
          id: gas_meter_flow_rate
          value: 0

  #  Reset the total energy entity (Water - Current Reading)
  - platform: template
    name: 'Water Meter - Reset Reading'
    entity_category: config
    id: button_reset_water_reading
    on_press:
      - pulse_meter.set_total_pulses:
          id: water_meter_flow_rate
          value: 0

#########################################################################
#
# Ethernet configuration entry. If using WiFi then these lines needed to the commented out
# also Captive Portal must be commented out, as it is for WiFi use
#

#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
#  mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 0

   # Optional manual IP
# manual_ip:
# static_ip: 10.0.5.15
# gateway: 10.0.5.1
# subnet: 255.255.255.0

#######################################################################################

globals:
  #  Globals for use with pulse meter, to allow storing and setting a base reading for gas meter
  - id: gas_total_m3
    type: float
    restore_value: yes
   # Change initial value to 0 to reset, or enter your actual meter reading to start counting lifetime total from that number 
#    initial_value: "0"
  #  Globals for use with pulse meter, to allow storing and setting a base reading for water meter
  - id: water_meter_total_litres
    type: float
    restore_value: yes
   # Change initial value to 0 to reset, or enter your actual meter reading to start counting lifetime total from that number 
#    initial_value: "0"

#######################################################################################
#
# RF 433mhz receiver configuration
#
  
# remote_receiver:
#  pin:
#    number: 2
#    inverted: true
#  dump: rc_switch
#  # Settings to optimize recognition of RF devices
#  tolerance: 50%
#  filter: 250us
#  idle: 4ms
#  buffer_size: 2kb
  
  # RF 433mhz transmitter configuration
# remote_transmitter:
#  pin: 15
#  carrier_duty_percent: 100%

#######################################################################################
#
# PCF8574 I/O expander configuration
# Address below are for v1.5 board - https://www.kincony.com/forum/showthread.php?tid=2128
#

pcf8574:
  - id: 'pcf8574_hub_out_1' # for output channel 1-8
    address: 0x24

  - id: 'pcf8574_hub_out_2' # for output channel 9-16
    address: 0x25

  - id: 'pcf8574_hub_in_1' # for input channel 1-8
    address: 0x22

  - id: 'pcf8574_hub_in_2' # for input channel 9-16
    address: 0x21

################################################################################
#
#  Outputs - 1 to 16. DC12V/24V 500mA per channel
#

switch:

  # Output 1 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 01'
    id: sensor_relay_1
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 0
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 2 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 02'
    id: sensor_relay_2
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 1
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 3 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 03'
    id: sensor_relay_3
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 2
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 4 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 04'
    id: sensor_relay_4
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 3
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 5 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 05'
    id: sensor_relay_5
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 4
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 6 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 06'
    id: sensor_relay_6
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 5
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 7 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 07'
    id: sensor_relay_7
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 6
      mode: OUTPUT
      inverted: true
    internal: true

    # Output 8 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 08'
    id: sensor_relay_8
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 7
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 9 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 09'
    id: sensor_relay_9
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 0
      mode: OUTPUT
      inverted: true
    internal: true

  # Output 10 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 10'
    id: sensor_relay_10
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 1
      mode: OUTPUT
      inverted: true
    internal: true

# Output 11 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 11'
    id: sensor_relay_11
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 2
      mode: OUTPUT
      inverted: true
    internal: true

# Output 12 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 12'
    id: sensor_relay_12
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 3
      mode: OUTPUT
      inverted: true
    internal: true

# Output 13 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 13'
    id: sensor_relay_13
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 4
      mode: OUTPUT
      inverted: true
    internal: true

# Output 14 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 14'
    id: sensor_relay_14
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 5
      mode: OUTPUT
      inverted: true
    internal: true

# Output 15 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 15'
    id: sensor_relay_15
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 6
      mode: OUTPUT
      inverted: true
    internal: true

# Output 16 - Assigned Function ?
  - platform: gpio
    name: 'Ouput Relay 16'
    id: sensor_relay_16
    restore_mode: ${relay_restore_mode}
    pin:
      pcf8574: pcf8574_hub_out_2
      number: 7
      mode: OUTPUT
      inverted: true
    internal: true

################################################################################
#
# Binary Sensors:
#

binary_sensor:

################################################################################
#  Digital Inputs - 1 to 16
#
#  DC 0-12V. Logical define:
#  - DC 0-1.8V logical "0"
#  - DC 8-12V logical "1"
#

    # Input 1 - Assigned Function
  - platform: gpio
    name: 'Digital Input 01'
    id: input1
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 0
      mode: INPUT
      inverted: true
    internal: true

    # Input 2 - Assigned Function
  - platform: gpio
    name: 'Digital Input 02'
    id: input2
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 1
      mode: INPUT
      inverted: true
    internal: true

    # Input 3 - Assigned Function
  - platform: gpio
    name: 'Digital Input 03'
    id: input3
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 2
      mode: INPUT
      inverted: true
    internal: true

    # Input 4 - Assigned Function
  - platform: gpio
    name: 'Digital Input 04'
    id: input4
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 3
      mode: INPUT
      inverted: true
    internal: true

    # Input 5 - Assigned Function
  - platform: gpio
    name: 'Digital Input 05'
    id: input5
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 4
      mode: INPUT
      inverted: true
    internal: true

    # Input 6 - Assigned Function
  - platform: gpio
    name: 'Digital Input 06'
    id: input6
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 5
      mode: INPUT
      inverted: true
    internal: true

    # Input 7 - Assigned Function
  - platform: gpio
    name: 'Digital Input 07'
    id: input7
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 6
      mode: INPUT
      inverted: true
    internal: true
    
    # Input 8 - Assigned Function
  - platform: gpio
    name: 'Digital Input 08'
    id: input8
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 7
      mode: INPUT
      inverted: true
    internal: true

    # Input 9 - Assigned Function
  - platform: gpio
    name: 'Digital Input 09'
    id: input9
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 0
      mode: INPUT
      inverted: true
    internal: true

    # Input 10 - Assigned Function
  - platform: gpio
    name: 'Digital Input 10'
    id: input10
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 1
      mode: INPUT
      inverted: true
    internal: true

    # Input 11 - Assigned Function
  - platform: gpio
    name: 'Digital Input 11'
    id: input11
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 2
      mode: INPUT
      inverted: true
    internal: true

    # Input 12 - Assigned Function
  - platform: gpio
    name: 'Digital Input 12'
    id: input12
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 3
      mode: INPUT
      inverted: true
    internal: true

    # Input 13 - Assigned Function
  - platform: gpio
    name: 'Digital Input 13'
    id: input13
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 4
      mode: INPUT
      inverted: true
    internal: true

    # Input 14 - Assigned Function
  - platform: gpio
    name: 'Digital Input 14'
    id: input14
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 5
      mode: INPUT
      inverted: true
    internal: true

    # Input 15 - Assigned Function
  - platform: gpio
    name: 'Digital Input 15'
    id: input15
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 6
      mode: INPUT
      inverted: true
    internal: true

    # Input 16 - Assigned Function
  - platform: gpio
    name: 'Digital Input 16'
    id: input16
    pin:
      pcf8574: pcf8574_hub_in_2
      number: 7
      mode: INPUT
      inverted: true
    internal: true


################################################################################
#
#  Text Sensors:
#

text_sensor:
  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
    update_interval: 60min
    
  - platform: sun
    name: Sun Next Sunset
    type: sunset
    update_interval: 60min


################################################################################
#
#  Sensors
#

sensor:

  # Provides the Sun elevation and Azimuth, based upon the Lat & Long set above
  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth

################################################################################
#
# ADC Input Port 1 - 4-20mA
#

#  - platform: adc
#    pin: 36
#    name: 'Analog Digital Input 1'
#    accuracy_decimals: 3
#    device_class: "current"
#    unit_of_measurement: "mA"
#    state_class: "measurement"
#    update_interval: 10s
#    attenuation: 11db  #auto
#    filters:
#    - calibrate_polynomial:
#       degree: 2
#       datapoints:
          # Map from SENSOR -> TRUE value
#          - 3.90 -> 3.31
#          - 3.65 -> 3.04
#          - 3.09 -> 2.73
#          - 2.51 -> 2.28
#          - 2.13 -> 1.95
#          - 1.61 -> 1.51
#          - 1.34 -> 1.28
#          - 1.10 -> 1.08
#          - 0.60 -> 0.66
#          - 0.14 -> 0.25
#          - 0.00 -> 0.00
#    internal: true


################################################################################
#
# ADC Input Port 2 - 4-20mA
#

#  - platform: adc
#    pin: 34
#    name: 'Analog Digital Input 2'
#    accuracy_decimals: 3
#    device_class: "current"
#    unit_of_measurement: "mA"
#    state_class: "measurement"
#    update_interval: 10s
#    attenuation: 11db  #auto
#    filters:
#    - calibrate_polynomial:
#       degree: 2
#       datapoints:
          # Map from SENSOR -> TRUE value
#          - 3.90 -> 3.31
#          - 3.65 -> 3.04
#          - 3.09 -> 2.73
#          - 2.51 -> 2.28
#          - 2.13 -> 1.95
#          - 1.61 -> 1.51
#          - 1.34 -> 1.28
#          - 1.10 -> 1.08
#          - 0.60 -> 0.66
#          - 0.14 -> 0.25
#          - 0.00 -> 0.00
#    internal: true


################################################################################
#
# ADC Input Port 3 - 0-5V
#

  - platform: adc
    pin: 35
    name: 'Water Tank - Voltage'
    id: water_tank_voltage
    accuracy_decimals: 3
    device_class: "voltage"
    state_class: "measurement"
    unit_of_measurement: "V"
    update_interval: 5s
    attenuation: 12db  #auto
    filters:
#     - multiply: 3.3
    - median: 
       window_size: 6
       send_every: 6
       send_first_at: 6
#    - calibrate_polynomial:
#       degree: 2
#       datapoints:
#          # Map from SENSOR -> TRUE value
#         - 4.15867 -> 4.01667
#         - 3.75700 -> 3.61500
#         - 3.35533 -> 3.21333
#         - 2.95367 -> 2.81167
#         - 2.55200 -> 2.41000
#         - 2.15033 -> 2.00833
#         - 1.74867 -> 1.60667
#         - 1.34700 -> 1.20500
#         - 0.94533 -> 0.80333
#         - 0.14200 -> 0.00000
    internal: true

################################################################################
#
# Water Tank - Conversions and metrics from pressure sensor
#

  - platform: template
    name: "Water Tank - Level"
    id: water_tank_level
    icon: 'mdi:water-well'
    unit_of_measurement: 'cm'
    lambda: |-
        return id(water_tank_voltage).state;
    update_interval: 1s #the delta filter will ensure it only sends values when something changes. 
    filters:
      - calibrate_linear:
          # Measured value of X volt maps to Y cm
          - 4.01667 -> 241.0   # 100%
          - 3.61500 -> 216.9   #  90%
          - 3.21333 -> 192.8   #  80%
          - 2.81167 -> 168.7   #  70%
          - 2.41000 -> 144.6   #  60%
          - 2.00833 -> 120.5   #  50%
          - 1.60667 -> 96.4    #  40%
          - 1.20500 -> 72.3    #  30%
          - 0.80333 -> 48.2    #  20%
          - 0.40167 -> 24.1    #  10%
          - 0.00000 -> 0.00    #   0%

#          - 4.15867 -> 241.0   # 100%
#          - 3.75700 -> 216.9   #  90%
#          - 3.35533 -> 192.8   #  80%
#          - 2.95367 -> 168.7   #  70%
#          - 2.55200 -> 144.6   #  60%
#          - 2.15033 -> 120.5   #  50%
#          - 1.74867 -> 96.4    #  40%
#          - 1.34700 -> 72.3    #  30%
#          - 0.94533 -> 48.2    #  20%
#          - 0.54367 -> 24.1    #  10%
#          - 0.14200 -> 0.00    #   0%


        # From https://www.sensorsone.com/measurement-to-linear-0-5v-converter/?iunit=cm&irdg=0.8452500672&ilo=0.469&ihi=4.016666&ounit=V&olo=0&ohi=5
      - delta : 0.001     # Only send the result if the difference with the last sent result is higher than this
      - offset: 0.01847   # Add 0.01847cm to total, to correct to 0L when voltage is 0.469V


################################################################################
#
# Water Tank - Percentage Full
#

  - platform: template
    name: "Water Tank - %"
    id: water_tank_percent
    icon: 'mdi:water-well'
    unit_of_measurement: '%'
    update_interval: 1s #the delta filter will ensure it only sends values when something changes.     
    lambda: |-
        return id(water_tank_level).state / 241.0 * 100;
    # divide by max water level height to get a percentage. Inlet height 2410mm / tank height 2485mm. Diamter 2380mm. 10,000L
    # H 2410mm x D 2380mm = 10,721.6305 L (Full).   2410mm = 23.56kPa / .24bar / 3.42psi / 176.75 mmHg
    # local gravity = 9.79697g ms2.  1,000L = 979.697kg
#    update_interval: 1s #the delta filter will ensure it only sends values when something changes. 
    filters:
      - delta : 0.1 #only send the result if the difference with the last sent result is higher than this

################################################################################
#
# Water Tank - Litres held in the tank
#

  - platform: template
    name: "Water Tank - Litres"
    id: water_tank_litres
    icon: 'mdi:water-well'
    unit_of_measurement: 'L'
    lambda: |-
      return id(water_tank_level).state / 100 * 3.14159265359 * 1.19 * 1.19 * 1000.0;
#
#      if (id(water_tank_level).state <= 0) {
#        return {"Empty"};
#      }
#      else {
#        return id(water_tank_level).state / 100 * 3.14159265359 * 1.19 * 1.19 * 1000.0;
#      }    # height (meters) times pi times radius (meters) squared times 1000 gives litres. 

    # This works if your water tank is a cylinder shape. Otherwise you have to use different calculations.
    # 10,000L with diamter of 2.38m = 224.7792431210859cm height
    #
    # return id(water_tank_level).state / 100 * 3.14159265359 * 1.19 * 1.19 * 1000.0;
    update_interval: 1s #the delta filter will ensure it only sends values when something changes. 
    filters:
      - delta : 0.001 #only send the result if the difference with the last sent result is higher than this


## 655.4 m or 2150.3 feet Location :-34.72653,149.72461

################################################################################
#
# ADC Input Port 4 - 0-5V
#

#  - platform: adc
#    pin: 39
#    name: 'Analog Digital Input 4'
#    accuracy_decimals: 3
#    device_class: "voltage"
#    state_class: "measurement"
#    unit_of_measurement: "V"
#    update_interval: 10s
#    attenuation: auto   # 12db
#    filters:
#    - calibrate_polynomial:
#       degree: 2
#       datapoints:
#          # Map from SENSOR -> TRUE value
#          - 3.90 -> 3.31
#          - 3.65 -> 3.04
#          - 3.09 -> 2.73
#          - 2.51 -> 2.28
#          - 2.13 -> 1.95
#          - 1.61 -> 1.51
#          - 1.34 -> 1.28
#          - 1.10 -> 1.08
#          - 0.60 -> 0.66
#          - 0.14 -> 0.25
#          - 0.00 -> 0.00
#    internal: true


################################################################################
#
#  GPIO Inputs - 1 to 3
#

  # sensor:
  ################################################################################
  #
  # GPIO Input 1 - PIN 32
  # Utility - Gas Meter
  #

  - platform: pulse_counter
    name: "Gas Meter - Pulse Counter"
    id: pulse_gas_meter
    pin:
      number: 32
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    update_interval : 15s

  - platform: pulse_meter
    name: 'Gas Meter - Flow Rate'
    id: "gas_meter_flow_rate"
    unit_of_measurement: "L/min" # "m³/h"
    state_class: measurement
#    device_class: volume
    icon: "mdi:pump"
    accuracy_decimals: 3
    pin:
      number: 32
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 3min
    filters:
      - lambda: return (x / 0.1);       # 1 pulse = 10L
#      - multiply: 10.0
    #  Uses the above pulse_meter and adds sensor and calculations for tracking m3
    total:    
      id: gas_meter_reading_m3
      name: 'Gas Meter - Reading (m³)'
      unit_of_measurement: "m³"
      icon: "mdi:counter"
      state_class: "total_increasing"
      device_class: gas
      accuracy_decimals: 3
      filters:
        - lambda: return (x / 100.0);    # 100 pulses = 1,000L = 1m3
#        - multiply: 0.01
    #  Adds the calculation for 'Reading Since Reset' 
      on_value: 
        then:
          - lambda: |-
              static float previous_gas_m3_value = 0.0;
              float current_gas_m3_value = id(gas_meter_reading_m3).state;
              id(gas_total_m3) += current_gas_m3_value - previous_gas_m3_value;
              previous_gas_m3_value = current_gas_m3_value;


  - platform: template
    name: "Gas Meter - Reading (MJ)"
    id: gas_meter_reading_mj
    unit_of_measurement: "MJ"
    device_class: energy
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3   
    lambda: |-
      return (id(gas_meter_reading_m3).state * 0.952 * 38.77);


  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  - platform: template
    name: "Gas Meter - Reading (Since Last Reset)"
    id: gas_meter_reading_since_last_reset
    unit_of_measurement: "m³"
    device_class: gas
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 3
    # The number 5251.07 should be replaced with your own gas meters physical reading
    lambda: |-
          return (id(gas_total_m3) + 0);
    # Set interval that updates are sent to HA instance
    update_interval: 15s
    filters:
      - delta : 0.001

  ################################################################################
  #
  # GPIO Input 2 - PIN 33
  # Utility - Water Meter
  #

  - platform: pulse_counter
    name: "Water Meter - Pulse Counter"
    id: pulse_water_meter
    pin:
      number: 33
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    update_interval : 15s


  - platform: pulse_meter
    name: "Water Meter - Flow Rate"
    id: "water_meter_flow_rate"
    unit_of_measurement: "L/min"
    state_class: measurement
    device_class: water
    icon: "mdi:pump"
    accuracy_decimals: 2
    pin:
      number: 33
      allow_other_uses: true
      inverted: true
      mode:
        input: true
        pullup: true
    internal_filter_mode: PULSE
    internal_filter: 100ms
    timeout: 1min
    filters:
      - lambda: return (x / 2.0);       # 1 pulse = 0.5L
    #  Uses the above pulse_meter and adds sensor and calculations for tracking current litres
    total:
      name: 'Water Meter - Reading'
      id: water_meter_reading
      unit_of_measurement: "L"
      icon: "mdi:water"
      state_class: "total_increasing"
      device_class: water
      accuracy_decimals: 2
      filters:
        - lambda: return (x / 2000.0);   # 1 pulse = 0.5L
        - delta : 0.001
#        - multiply: 0.5
    #  Adds the calculation for 'Reading Total' 
      on_value: 
        then:
          - lambda: |-
              static float previous_water_meter_litres_value = 0.0;
              float current_water_meter_litres_value = id(water_meter_reading).state;
              id(water_meter_total_litres) += current_water_meter_litres_value - previous_water_meter_litres_value;
              previous_water_meter_litres_value = current_water_meter_litres_value;


  #  Adds the 'Reading Since Reset' that tracks the LIFETIME total of m3
  - platform: template
    name: "Water Meter - Reading (Since Last Reset)"
    id: water_meter_reading_since_last_reset
    unit_of_measurement: "L"
    device_class: water
    state_class: "total_increasing"
    icon: "mdi:counter"
    accuracy_decimals: 2
    # The number 5251.07 should be replaced with your own gas meters physical reading
    lambda: |-
          return (id(water_meter_total_litres) + 0);
    # Set interval that updates are sent to HA instance
    update_interval: 15s
    filters:
      - delta : 0.001


# sensor:
  - platform: copy
    source_id: water_tank_voltage
    name: 'Water Tank - Pressure (kPa)'
    id: water_tank_pressure_bar
    accuracy_decimals: 2
    device_class: pressure
    state_class: "measurement"
    unit_of_measurement: kPa
    icon: "mdi:gauge"
    filters:
#      - multiply: 3.3
      - median: 
          window_size: 6
          send_every: 6
          send_first_at: 6
      - calibrate_linear:
          # Measured value of X volt maps to y kPa
          - 4.15867 -> 23.6061428   # 100%
          - 3.75700 -> 21.2455285   #  90%
          - 3.35533 -> 18.8849142   #  80%
          - 2.95367 -> 16.5243      #  70%
          - 2.55200 -> 14.1636857   #  60%
          - 2.15033 -> 11.8030714   #  50%
          - 1.74867 -> 9.44245712   #  40%
          - 1.34700 -> 7.08184284   #  30%
          - 0.94533 -> 4.72122856   #  20%
          - 0.54367 -> 2.36061428   #  10%
          - 0.14200 -> 0.0          #   0%
        # From https://www.sensorsone.com/liquid-level-to-pressure-calculator/?lval=241&lunit=centimetres+%28cm%29&lfctr=cm&sg=1&grav=9.79508&punit=kilopascals+%28kPa%29&pfctr=kPa
        # Gouburn 655m - Local Gravity 9.79508 ms-2
    internal: true

  - platform: copy
    source_id: water_tank_voltage
    name: 'Water Tank - Pressure (psi)'
    id: water_tank_pressure_psi
    accuracy_decimals: 2
    device_class: pressure
    state_class: "measurement"
    unit_of_measurement: psi
    icon: "mdi:gauge"
    filters:
#      - multiply: 3.3
      - median: 
          window_size: 6
          send_every: 6
          send_first_at: 6
      - calibrate_linear:
          # Measured value of X volt maps to y PSI

          - 4.15867 -> 3.42378155   # 100%
          - 3.75700 -> 3.08140339   #  90%
          - 3.35533 -> 2.73902524   #  80%
          - 2.95367 -> 2.39664708   #  70%
          - 2.55200 -> 2.05426893   #  60%
          - 2.15033 -> 1.71189077   #  50%
          - 1.74867 -> 1.36951262   #  40%
          - 1.34700 -> 1.02713446   #  30%
          - 0.94533 -> 0.68475631   #  20%
          - 0.54367 -> 0.342378155  #  10%
          - 0.14200 -> 0.0          #   0%

        # https://www.sensorsone.com/liquid-level-to-pressure-calculator/?lval=241&lunit=centimetres+%28cm%29&lfctr=cm&sg=1&grav=9.79508&punit=kilopascals+%28kPa%29&pfctr=kPa
    internal: true
